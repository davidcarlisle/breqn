% \iffalse meta-comment
%
% Copyright (C) 1997-2003 by Michael J. Downes
% Copyright (C) 2007 by Morten Hoegholm <mh.ctan@gmail.com>
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either
% version 1.3 of this license or (at your option) any later
% version. The latest version of this license is in
%    http://www.latex-project.org/lppl.txt
% and version 1.3 or later is part of all distributions of
% LaTeX version 2005/12/01 or later.
%
% This work has the LPPL maintenance status "maintained".
%
% This Current Maintainer of this work is Morten Hoegholm.
%
% This work consists of the main source file breqn.dtx
% and the derived files
%    breqn.sty, breqn.pdf, breqn.ins, breqn.drv.
%
% Distribution:
%    CTAN:macros/latex/contrib/mh/breqn.dtx
%    CTAN:macros/latex/contrib/mh/breqn.pdf
%
% Unpacking:
%    (a) If breqn.ins is present:
%           tex breqn.ins
%    (b) Without breqn.ins:
%           tex breqn.dtx
%    (c) If you insist on using LaTeX
%           latex \let\install=y\input{breqn.dtx}
%        (quote the arguments according to the demands of your shell)
%
% Documentation:
%    (a) If breqn.drv is present:
%           latex breqn.drv
%    (b) Without breqn.drv:
%           latex breqn.dtx; ...
%    The class ltxdoc loads the configuration file ltxdoc.cfg
%    if available. Here you can specify further options, e.g.
%    use A4 as paper format:
%       \PassOptionsToClass{a4paper}{article}
%
%    Programm calls to get the documentation (example):
%       pdflatex breqn.dtx
%       makeindex -s gind.ist breqn.idx
%       pdflatex breqn.dtx
%       makeindex -s gind.ist breqn.idx
%       pdflatex breqn.dtx
%
% Installation:
%    TDS:tex/latex/mh/breqn.sty
%    TDS:doc/latex/mh/breqn.pdf
%    TDS:source/latex/mh/breqn.dtx
%
%<*ignore>
\begingroup
  \def\x{LaTeX2e}
\expandafter\endgroup
\ifcase 0\ifx\install y1\fi\expandafter
         \ifx\csname processbatchFile\endcsname\relax\else1\fi
         \ifx\fmtname\x\else 1\fi\relax
\else\csname fi\endcsname
%</ignore>
%<*install>
\input docstrip.tex
\Msg{************************************************************************}
\Msg{* Installation}
\Msg{* Package: breqn 2007/12/03 v0.95 Breqn (MH)}
\Msg{************************************************************************}

\keepsilent
\askforoverwritefalse

\preamble

This is a generated file.

Copyright (C) 1997-2003 by Michael J. Downes
Copyright (C) 2007 by Morten Hoegholm <mh.ctan@gmail.com>

This work may be distributed and/or modified under the
conditions of the LaTeX Project Public License, either
version 1.3 of this license or (at your option) any later
version. The latest version of this license is in
   http://www.latex-project.org/lppl.txt
and version 1.3 or later is part of all distributions of
LaTeX version 2005/12/01 or later.

This work has the LPPL maintenance status "maintained".

This Current Maintainer of this work is Morten Hoegholm.

This work consists of the main source file breqn.dtx
and the derived files
   breqn.sty, breqn.pdf, breqn.ins, breqn.drv.

\endpreamble

\generate{%
  \file{breqn.ins}{\from{breqn.dtx}{install}}%
  \file{breqn.drv}{\from{breqn.dtx}{driver}}%
  \usedir{tex/latex/mh}%
  \file{breqn.sty}{\from{breqn.dtx}{package}}%
}

\obeyspaces
\Msg{************************************************************************}
\Msg{*}
\Msg{* To finish the installation you have to move the following}
\Msg{* file into a directory searched by TeX:}
\Msg{*}
\Msg{*     breqn.sty}
\Msg{*}
\Msg{* To produce the documentation run the file `breqn.drv'}
\Msg{* through LaTeX.}
\Msg{*}
\Msg{* Happy TeXing!}
\Msg{*}
\Msg{************************************************************************}

\endbatchfile
%</install>
%<*ignore>
\fi
%</ignore>
%<*driver>
\NeedsTeXFormat{LaTeX2e}
\ProvidesFile{breqn.drv}%
  [2007/12/03 v0.95 breqn (MH)]
\documentclass{ltxdoc}

\usepackage{verbatim,xspace,listings}
\lstloadlanguages{[AlLaTeX]TeX}

\lstnewenvironment{literalcode}{}{}
\makeatletter

{\catcode`\%=12
 \long\gdef\@gobble@percent@space#1{\ifx 
   #1%\expandafter\@gobble\else\expandafter#1\fi}}


\AtBeginDocument{\def\verbatim@processline{\expandafter\check@percent
  \the\verbatim@line\par}}
\newwrite\tmp@out
\newcounter{xio}
\newenvironment{xio}{% example input and output
  \par\addvspace\bigskipamount
  \hbox{\itshape 
    \refstepcounter{xio}\kern-\p@ Example \thexio}\@nobreaktrue
  \immediate\openout\tmp@out\jobname.tmp \relax
  \begingroup
  \let\do\@makeother\dospecials\catcode`\^^M\active
  \def\verbatim@processline{
    \immediate\write\tmp@out{\expandafter\@gobble@percent@space
      \the\verbatim@line}}%
  \verbatim@start
}{%
  \immediate\closeout\tmp@out
  \@verbatim\frenchspacing\@vobeyspaces
  \@@input \jobname.tmp \relax
  \endgroup
  \par\medskip
  \noindent\ignorespaces
  \@@input \jobname.tmp \relax
  \par\medskip
}
\makeatother



\providecommand*\pkg[1]{\textsf{#1}}
\providecommand*\cls[1]{\textsf{#1}}
\providecommand*\opt[1]{\texttt{#1}}
\providecommand*\env[1]{\texttt{#1}}
\providecommand*\fn[1]{\texttt{#1}}

\providecommand*\cn[1]{\cs{#1}}

\providecommand*\tex{\TeX\xspace}
\providecommand*\latex{\LaTeX\xspace}
\providecommand*\dbldollars{\texttt{\detokenize{$$}}}%$$

\newenvironment{aside}{\begin{quote}\bfseries}{\end{quote}}
\newenvironment{dn}{\begin{quote}\bfseries}{\end{quote}}

\newcommand\dash{\textemdash}
\newcommand\dbslash[1]{\texttt{\string\\}}
\newcommand\thepkg{the \pkg{breqn} package\xspace}

\providecommand*\texbook{\textsl{The \protect\TeX{}book}\xspace}

\providecommand*\dotsc{\ldots}
\providecommand*\eqref[1]{(\ref{#1})}

\providecommand*\qq[1]{\textquotedblleft#1\textquotedblright}
\providecommand*\quoted[1]{\textquoteleft#1\textquoteright}
\providecommand*\dquoted[1]{\textquotedblleft#1\textquotedblright}

\providecommand*\ie{i.e.,\xspace}
\providecommand*\eg{e.g.,\xspace}
\providecommand*\etc{etc.\xspace}
\providecommand*\cf{cf.\xspace}

\providecommand*\ndash{\unskip\textendash\ignorespaces}
\providecommand*\mdash{\unskip\textemdash\ignorespaces}


\usepackage[cmbase]{flexisym}
\usepackage{breqn}

\begin{document}
  \DocInput{breqn.dtx}
\end{document}
%</driver>
% \fi
%
% \title{The \pkg{breqn} package}
% \date{2007/12/03 v0.95}
% \author{Morten H\o gholm \\\texttt{mh.ctan@gmail.com}}
%
% \maketitle
% \begin{abstract}
%   The \pkg{breqn} package facilitates automatic line-breaking of
%   displayed math expressions. 
% \end{abstract}
%
% \part*{User's guide}
%
% \section{A bit of history}
%
% Originally \pkg{breqn}, \pkg{flexisym}, and \pkg{mathstyle} were
% created by Michael J.~Downes from the American Mathematical Society
% during the 1990's up to late 2002. Sadly---and much to the shock of
% the \TeX\ world---Michael passed away in early 2003 at the age of
% only~44.
%
% The American Mathematical Society has kindly allowed me to assume
% maintainership of this part of his work and I wish to express my
% gratitude to them and to Barbara Beeton in particular for providing
% me with the files I needed.
%
% I hope to continue Michael's work, thereby allowing users to create
% more \emph{masterpieces of the publishing art} as I think he would
% have wanted.
%
% \section{The state of things}
%
% The original sources of \pkg{breqn} and related files exist in a
% non-dtx format devised by Michael Downes himself.  I will eventually
% incorporate the implementation notes but for the time being getting
% the package on CTAN takes precedence over this.
%
% Lars Madsen has kindly written a Perl script for transforming the
% original source files into near-perfect dtx state, requiring only
% very little hand tuning. Without his help it would have been nigh
% impossible to incorporate the original sources with Michael's
% comments. A big, big thank you to him.
%
% 
% The documentation for the package was formerly found in
% \fn{breqndoc}. It has now been added to this implementation
% file. Below follows the contents of the original \pkg{breqn}
% documentation.
%
% \section{To do}
%
% \begin{itemize}
% \item Handling of QED
% \item Space between \verb'\end{dmath}' and following punctuation will
% prevent the punctuation from being drawn into the equation.
% \item Overriding the equation layout
% \item Overriding the placement of the equation number
% \item \qq{alignid} option for more widely separated equations where
%   shared alignment is desired (requires two passes)
% \item Or maybe provide an \qq{alignwidths} option where you give
%   lhs/rhs width in terms of ems? And get feedback later on discrepancies
%   with the actual measured contents?
% \item \cs{intertext} not needed within dgroup! But currently there are
%   limitations on floating objects within dgroup.
% \item \verb'align={1}' or 2, 3, 4 expressing various levels of demand
%   for group-wide alignment. Level 4 means force alignment even if some
%   lines then have to run over the right margin! Level 1, the default,
%   means first break LHS-RHS equations as if it occurred by itself, then
%   move them left or right within the current line width to align them if
%   possible. Levels 2 and 3 mean try harder to align but give up if
%   overfull lines result.
% \item Need an \cs{hshift} command to help with alignment of
%   lines broken at a discretionary times sign. Also useful for adjusting
%   inside-delimiter breaks.
% \end{itemize}
%
% \section{Introduction}
%
% The \pkg{breqn} package for \LaTeX\ provides solutions to a number of
% common difficulties in writing displayed equations and getting
% high-quality output. For example, it is a well-known inconvenience that
% if an equation must be broken into more than one line, \cs{left} \dots\
% \cs{right} constructs cannot span lines. The \pkg{breqn} package makes
% them work as one would expect whether or not there is an intervening
% line break.
%
% The single most ambitious goal of the \pkg{breqn} package, however, is
% to support automatic linebreaking of displayed equations. Such
% linebreaking cannot be done without substantial changes under the hood
% in the way math formulas are processed. For this reason, especially in
% the alpha release, users should proceed with care and keep an eye out
% for unexpected glitches or side effects.
%
% \section{Principal features}
% The principal features of the \pkg{breqn} package are:
% \begin{description}
%
% \item[semantically oriented structure] The way in which compound
% displayed formulas are subdivided matches the logical structure more
% closely than, say, the standard \env{eqnarray} environment. Separate
% equations in a group of equations are written as separate environments
% instead of being bounded merely by \dbslash/ commands. Among other
% things, this clears up a common problem of wrong math symbol spacing at
% the beginning of continuation lines. It also makes it possible to
% specify different vertical space values for the space between lines of a
% long, broken equation and the space between separate equations in a
% group of equations.
%
% \item[automatic line breaking] Overlong equations will be broken
% automatically to the prevailing column width, and continuation lines
% will be indented following standard conventions.
%
% \item[line breaks within delimiters] Line breaks within \cs{left} \dots\
% \cs{right} delimiters work in a natural way. Line breaks can be
% forbidden below a given depth of delimiter nesting through a package
% option.
%
% \item[mixed math and text] Display equations that contain mixed
% math and text, or even text only, are handled naturally by means of a
% \env{dseries} environment that starts out in text mode instead of math
% mode.
%
% \item[ending punctuation] The punctuation at the end of a displayed
% equation can be handled in a natural way that makes it easier to promote
% or demote formulas from\slash to inline math, and to apply special
% effects such as adding space before the punctuation.
%
% \item[flexible numbering] Equation numbering is handled in a natural
% way, with all the flexibility of the \pkg{amsmath} package and with no
% need for a special \cs{nonumber} command.
%
% \item[special effects] It is easy to apply special effects to individual
% displays, e.g., changing the type size or adding a frame.
%
% \item[using available space] Horizontal shrink is made use of
% whenever feasible. With most other equation macros it is frozen when it
% occurs between \cs{left} \dots\ \cs{right} delimiters, or in any sort of
% multiline structure, so that some expressions require two lines that would
% otherwise fit on one.
%
% \item[high-quality spacing] The \cs{abovedisplayshortskip} is used when
% applicable (other equation macros fail to apply it in equations of more
% than one line).
%
% \item[abbreviations] Unlike the \pkg{amsmath} equation environments, the
% \pkg{breqn} environments can be called through user-defined abbreviations
% such as \cs{beq} \dots\ \cs{eeq}.
%
% \end{description}
%
% \section{Shortcomings of the package}
% The principal known deficiencies of the \pkg{breqn} package are:
%
% \subsection{Incompatibilities} As it pushes the envelope
% of what is possible within the context of \LaTeXe, \thepkg will tend
% to break other packages when used in combination with them, or to fail
% itself, when there are any areas of internal overlap; successful use may
% in some cases depend on package loading order.
%
% \subsection{Indention of delimited fragments} When line breaks within
% delimiters are involved, the automatic indention of continuation lines
% is likely to be unsatisfactory and need manual adjustment. I don't see
% any easy way to provide a general solution for this, though I have some
% ideas on how to attain partial improvements.
%
% \subsection{Math symbol subversion}
% In order for automatic line breaking to work, the operation of all the
% math symbols of class 2, 3, 4, and 5 must be altered (relations, binary
% operators, opening delimiters, closing delimiters). This is done by an
% auxiliary package \pkg{flexisym}. As long as you stick to the advertised
% \LaTeX\ interface for defining math symbols (\cs{DeclareMathSymbol}),
% things should work OK most of the time. Any more complex math symbol
% setup is quite likely to quarrel with the \pkg{flexisym} package.
% See Section~\ref{flexisym} for further information.
%
% \subsection{Subscripts and superscripts}
%
% Because of the changes to math symbols of class 2--5, writing certain
% combinations such as \verb'^+' or \verb'_\pm' or \verb'^\geq' without
% braces would lead to error messages; (The problem described here
% already exists in standard \LaTeX\ to a lesser extent, as you may know
% if you ever tried \verb'^\neq' or \verb'^\cong'; and indeed there are
% no examples in the \LaTeX\ book to indicate any sanction for omitting
% braces around a subscript or superscript.)
%
% The \pkg{flexisym} package therefore calls, as of version 0.92, another
% package called \pkg{mathstyle} which turns \verb'^' and \verb'_' into
% active characters. This is something that I believe is desirable in any
% case, in the long run, because having a proper mathstyle variable
% eliminates some enormous burdens that affect almost any
% nontrivial math macros, as well as many other things where the
% connection is not immediately obvious, e.g., the \LaTeX\ facilities for
% loading fonts on demand.
%
% Not that this doesn't introduce new and interesting problems of its
% own---for example, you don't want to put usepackage statements
% after flexisym for any package that refers to, e.g., \verb'^^J' or 
% \verb'^^M'
% internally (too bad that the \LaTeX\ package loading code does not
% include automatic defenses to ensure normal catcodes in the interior of
% a package; but it only handles the \verb'@' character).
%
% But I took a random AMS journal article, with normal end-user kind of
% \LaTeX\ writing, did some straightforward substitutions to change all
% the equations into dmath environments, and ran it with active math
% sub/sup: everything worked OK. This suggests to me that it can work in
% the real world, without an impossible amount of compatibility work.
%
% \section{Incomplete}
% In addition, in the \textbf{alpha release [1997/10/30]} the following
% gaps remain to be filled in:
% \begin{description}
% \item[documentation]
% The documentation could use amplification, especially more
% illustrations, and I have undoubtedly overlooked more than a few errors.
%
% \item[group alignment] The algorithm for doing alignment
% of mathrel symbols across equations in a \env{dgroup} environment 
% needs work. Currently the standard and \opt{noalign} alternatives
% produce the same output.
%
% \item[single group number] When a \env{dgroup} has a group number and
% the individual equations are unnumbered, the handling and placement of
% the group number aren't right.
%
% \item[group frame] Framing a group doesn't work, you might be able to
% get frames on the individual equations at best.
%
% \item[group brace] The \opt{brace} option for \env{dgroup} is intended
% to produce a large brace encompassing the whole group. This hasn't been
% implemented yet.
%
% \item[darray environment] The \env{darray} environment is unfinished.
%
% \item[dseries environment] The syntax and usage for the \env{dseries}
% environment are in doubt and may change.
%
% \item[failure arrangements] When none of the line-breaking passes for a
% \env{dmath} environment succeeds\dash i.e., at least one line is
% overfull\dash the final arrangement is usually rather poor. A better
% fall-back arrangement in the failure case is needed.
%
% \end{description}
%
% \section{Package options}
%
% Many of the package options for \thepkg are the same as options of the
% \env{dmath} or \env{dgroup} environments, and some of them require an
% argument, which is something that cannot be done through the normal
% package option mechanism. Therefore most of the \pkg{breqn} package
% options are designed to be set with a \cs{setkeys} command after the
% package is loaded. For example, to load the package and set the
% maximum delimiter nesting depth for line breaks to~1:
% \begin{verbatim}
% \usepackage{breqn}
% \setkeys{breqn}{breakdepth={1}}
% \end{verbatim}
%
% See the discussion of environment options, Section~\ref{envopts}, for
% more information.
%
% One package option that may be of interest to \TeX nicians is the
% \opt{debug} option; this activates some debugging statements embedded in
% the code of the alpha release which trace measuring activities related
% to line breaking.
%
% \section{Environments and commands}
% \subsection{Environments}
% All of the following environments take an optional argument for
% applying local effects such as changing the typesize or adding a
% frame to an individual equation.
%
% \begin{description}
% \item[\env{dmath}] Like \env{equation} but supports line breaking and variant
% numbers.
%
% \item[\env{dmath*}] Unnumbered; like \env{displaymath} but supports line
% breaking
%
% \item[\env{dseries}] Like \env{equation} but starts out in text mode;
% intended for series of mathematical expressions of the form `A, B, and
% C'. As a special feature, if you use
% \begin{verbatim}
% \begin{math} ... \end{math}
% \end{verbatim}
% for each expression in the series, a suitable amount of inter-expression
% space will be automatically added. This is a small step in the direction of
% facilitating conversion of display math to inline math, and vice versa: If
% you write a display as
% \begin{verbatim}
% \begin{dseries}
% \begin{math}A\end{math},
% \begin{math}B\end{math},
% and
% \begin{math}C\end{math}.
% \end{dseries}
% \end{verbatim}
% then conversion to inline form is simply a matter of removing the
% \verb'\begin{dseries}' and \verb'\end{dseries}' lines; the contents of the
% display need no alterations.
%
% It would be nice to provide the same feature for \verb'$' notation but
% there is no easy way to do that because the \verb'$' function has no
% entry point to allow changing what happens before math mode is entered.
% Making it work would therefore require turning \verb'$' into an active
% character, something that I hesitate to do in a \LaTeXe\ context.
%
% \item[\env{dseries*}] Unnumbered variant of \env{dseries}
%
% \item[\env{dgroup}] Like the \env{align} environment of \pkg{amsmath},
% but with each constituent equation wrapped in a \env{dmath},
% \env{dmath*}, \env{dseries}, or \env{dseries*} environment instead of being
% separated by \dbslash/. The equations are numbered with a group number.
% When the constituent environments are the numbered forms (\env{dmath} or
% \env{dseries}) they automatically switch to `subequations'-style
% numbering, i.e., something like (3a), (3b), (3c), \dots, depending on
% the current form of non-grouped equation numbers. See also
% \env{dgroup*}.
%
% \item[\env{dgroup*}] Unnumbered variant of \env{dgroup}. If the
% constituent environments are the numbered forms, they get normal
% individual equation numbers, i.e., something like (3), (4), (5), \dots~.
%
% \item[\env{darray}] Similar to \env{eqnarray} but with an argument like
% \env{array} for giving column specs. Automatic line breaking is not
% done here.
%
% \item[\env{darray*}] Unnumbered variant of \env{darray}, rather like
% \env{array} except in using \cs{displaystyle} for all column
% entries.
%
% \item[\env{dsuspend}] Suspend the current display in order to print
%   some text, without loss of the alignment. There is also a command
%   form of the same thing, \cs{intertext}. 
% \end{description}
%
% \subsection{Commands}
%
% The commands provided by \thepkg are:
% \begin{description}
% \item[\cs{condition}] This command is used for
% a part of a display which functions as a condition on the main
% assertion. For example:
% \begin{verbatim}
% \begin{dmath}
% f(x)=\frac{1}{x} \condition{for $x\neq 0$}
% \end{dmath}.
% \end{verbatim}
% \begin{dmath}
% f(x)=\frac{1}{x} \condition{for $x\neq 0$}
% \end{dmath}.
% The \cs{condition} command automatically switches to text mode (so that
% interword spaces function the way they should), puts in a comma, and
% adds an appropriate amount of space. To facilitate promotion\slash
% demotion of formulas, \cs{condition} \qq{does the right thing} if used
% outside of display math.
%
% To substitute a different punctuation mark instead of the default comma,
% supply it as an optional argument for the \cs{condition} command:
% \begin{verbatim}
% \condition[;]{...}
% \end{verbatim}
% (Thus, to get no punctuation: \verb'\condition[]{...}'.)
%
% For conditions that contain no text, you can use the starred form of the
% command, which means to stay in math mode:
% \begin{verbatim}
% \begin{dmath}
% f(x)=\frac{1}{x} \condition*{x\neq 0}
% \end{dmath}.
%
% If your material contains a lot of conditions like these, you might like
% to define shorter abbreviations, e.g.,
% \begin{verbatim}
% \newcommand{\mc}{\condition*}% math condition
% \newcommand{\tc}{\condition}%  text condition
% \end{verbatim}
% But \thepkg refrains from predefining such abbreviations in order that
% they may be left to the individual author's taste.
%
% \item[\cs{hiderel}] In a compound equation it is sometimes desired to
% use a later relation symbol as the alignment point, rather than the
% first one. To do this, mark all the relation symbols up to the desired
% one with \cs{hiderel}:
% \begin{verbatim}
% T(n) \hiderel{\leq} T(2^n) \leq c(3^n - 2^n) ...
% \end{verbatim}
% \end{description}
%
% \section{Various environment options}\label{envopts}
%
% The following options are recognized for the \env{dmath}, \env{dgroup},
% \env{darray}, and \env{dseries} environments; some of the options do not
% make sense for all of the environments, but if an option is used where
% not applicable it is silently ignored rather than treated as an error.
%
% \begin{verbatim}
% \begin{dmath}[style={\small}]
% \begin{dmath}[number={BV}]
% \begin{dmath}[label={xyz}]
% \begin{dmath}[relindent={1em}]
% \begin{dmath}[compact]
% \begin{dmath}[spread={1pt}]
% \begin{dmath}[frame]
% \begin{dmath}[frame={1pt},framesep={2pt}]
% \begin{dmath}[background={red}]
% \begin{dmath}[color={purple}]
% \begin{dmath}[breakdepth={0}]
% \end{verbatim}
%
% Use the \opt{style} option to change the type size of an individual
% equation. This option can also serve as a catch-all option for
% altering the equation style in other ways; the contents are simply
% executed directly within the context of the equation.
%
% Use the \opt{number} option if you want the number for a particular
% equation to fall outside of the usual sequence. If this option is used
% the equation counter is not incremented. If for some reason you need to
% increment the counter and change the number at the same time, use the
% \opt{style} option in addition to the \opt{number} option:
% \begin{verbatim}
% style={\refstepcounter{equation}}
% \end{verbatim}
%
% Use of the normal \cs{label} command instead of the \opt{label} option
% works, I think, most of the time (untested).
%
% Use the \opt{relindent} option to specify something other than the
% default amount for the indention of relation symbols. The default is
% 2em.
%
% Use the \opt{compact} option in compound equations to inhibit line
% breaks at relation symbols. By default a line break will be taken before
% each relation symbol except the first one. With the \opt{compact} option
% \LaTeX\ will try to fit as much material as possible on each line, but
% breaks at relation symbols will still be preferred over breaks at binary
% operator symbols.
%
% Use the \opt{spread} option to increase (or decrease) the amount of
% interline space in an equation. See the example given above.
%
% Use the \opt{frame} option to produce a frame around the body of the
% equation. The thickness of the frame can optionally be specified by
% giving it as an argument of the option. The default thickness is
% \cs{fboxrule}.
%
% Use the \opt{framesep} option to change the amount of space separating
% the frame from what it encloses. The default space is \cs{fboxsep}.
%
% Use the \opt{background} option to produce a colored background for the
% equation body. The \pkg{breqn} package doesn't automatically load the
% \pkg{color} package, so this option won't work unless you remember
% to load the \pkg{color} package yourself.
%
% Use the \opt{color} option to specify a different color for the contents
% of the equation. Like the \opt{background} option, this doesn't work if
% you forgot to load the \pkg{color} package.
%
% Use the \opt{breakdepth} option to change the level of delimiter nesting
% to which line breaks are allowed. To prohibit line breaks within
% delimiters, set this to 0:
% \begin{verbatim}
% \begin{dmath}[breakdepth={0}]
% \end{verbatim}
% The default value for breakdepth is 2. Even when breaks are allowed
% inside delimiters, they are marked as less desirable than breaks outside
% delimiters. Most of the time a break will not be taken within delimiters
% until the alternatives have been exhausted.
%
% Options for the \env{dgroup} environment: all of the above, and also
% \begin{verbatim}
% \begin{dgroup}[noalign]
% \begin{dgroup}[brace]
% \end{verbatim}
%
% By default the equations in a \env{dgroup} are mutually aligned on their
% relation symbols ($=$, $<$, $\geq$, and the like). With the
% \opt{noalign} option each equation is placed individually without
% reference to the others.
%
% The \opt{brace} option means to place a large brace encompassing the
% whole group on the same side as the equation number.
%
% Options for the \env{darray} environment: all of the above (where
% sensible), and also
% \begin{verbatim}
% \begin{darray}[cols={lcr@{\hspace{2em}}lcr}]
% \end{verbatim}
% The value of the \opt{cols} option for the darray environment should be
% a series of column specs as for the \env{array} environment, with the
% following differences:
% \begin{itemize}
% \item For l, c, and r what you get is not text, but math, and
% displaystyle math at that. To get text you must use a 'p' column
% specifier, or put an \cs{mbox} in each of the individual cells.
%
% \item Vertical rules don't connect across lines.
% \end{itemize}
%
% \section{The \pkg{flexisym} package}\label{flexisym}
%
% The \pkg{flexisym} package does some radical changes in the setup for
% math symbols to allow their definitions to change dynamically throughout
% a document. The \pkg{breqn} package uses this to make symbols of classes
% 2, 3, 4, 5 run special functions inside an environment such as
% \env{dmath} that provide the necessary support for automatic line
% breaking.
%
% The method used to effect these changes is to change the definitions of
% \cs{DeclareMathSymbol} and \cs{DeclareMathDelimiter}, and then
% re-execute the standard set of \LaTeX\ math symbol definitions.
% Consequently, additional mathrel and mathbin symbols defined by other
% packages will get proper line-breaking behavior if the other package is
% loaded after the \pkg{flexisym} package and the symbols are defined
% through the standard interface.
%
% \section{Caution! Warning!}
% Things to keep in mind when writing documents with \thepkg:
% \begin{itemize}
%
% \item The notation $:=$ must be written with the command \cs{coloneq}.
%   Otherwise the $:$ and the $=$ will be treated as two separate relation
%   symbols with an \qq{empty RHS} between them, and they will be printed
%   on separate lines.
%
% \item Watch out for constructions like \verb'^+' where a single binary
% operator or binary relation symbol is subscripted or superscripted. When
% the \pkg{breqn} or \pkg{flexisym} package is used, braces are mandatory
% in such constructions: \verb'^{+}'. This applies for both display and
% in-line math.
%
% \item If you want \LaTeX\ to make intelligent decisions about line
% breaks when vert bars are involved, use proper pairing versions of the
% vert-bar symbols according to context: \verb'\lvert n\rvert' instead of
% \verb'|n|'. With the nondirectional \verb'|' there is no way for \LaTeX\
% to reliably deduce which potential breakpoints are inside delimiters
% (more highly discouraged) and which are not.
%
% \item If you use the \pkg{german} package or some other package that
% turns double quote \verb'"' into a special character, you may encounter
% some problems with named math symbols of type mathbin, mathrel,
% mathopen, or mathclose in moving arguments. For example, \cs{leq} in a
% section title will be written to the \fn{.aux} file as something like
% \verb'\mathchar "3214'. This situation probably ought to be improved,
% but for now use \cs{protect}.
%
% \item Watch out for the \texttt{[} character at the beginning of a
% \env{dmath} or similar environment, if it is supposed to be interpreted
% as mathematical content rather than the start of the environment's
% optional argument.
%
% This is OK:
% \begin{verbatim}
% \begin{dmath}
% [\lambda,1]...
% \end{dmath}
% \end{verbatim}
% This will not work as expected:
% \begin{verbatim}
% \begin{dmath}[\lambda,1]...\end{dmath}
% \end{verbatim}
%
% \item Watch out for unpaired delimiter symbols (in display math only):
% \begin{verbatim}
% ( ) [ ] \langle \rangle \{ \} \lvert \rvert ...
% \end{verbatim}
% If an open delimiter is used without a close delimiter, or vice versa,
% it is normally harmless but may adversely affect line breaking. This is only
% for symbols that have a natural left or right directionality. Unpaired
% \cs{vert} and so on are fine.
%
% When a null delimiter is used as the other member of the pair
% (\verb'\left.' or \verb'\right.') this warning doesn't apply.
%
% \item If you inadvertently apply \cs{left} or \cs{right} to something
% that is not a delimiter, the error messages are likely to be a bit
% more confusing than usual. The normal \LaTeX\ response to an error such
% as
% \begin{verbatim}
% \left +
% \end{verbatim}
% is an immediate message
% \begin{verbatim}
% ! Missing delimiter (. inserted).
% \end{verbatim}
% When \thepkg is in use, \LaTeX\ will fail to realize anything is wrong
% until it hits the end of the math formula, or a closing delimiter
% without a matching opening delimiter, and then the first message is an
% apparently pointless
% \begin{verbatim}
% ! Missing \endgroup inserted.
% \end{verbatim}
%
% \end{itemize}
%
% \section{Examples}
%
% \renewcommand\theequation{\thesection.\arabic{equation}}
% % Knuth, SNA p74
% \begin{xio}
% Replace $j$ by $h-j$ and by $k-j$ in these sums to get [cf.~(26)]
% \begin{dmath}[label={sna74}]
% \frac{1}{6} \left(\sigma(k,h,0) +\frac{3(h-1)}{h}\right)
%   +\frac{1}{6} \left(\sigma(h,k,0) +\frac{3(k-1)}{k}\right)
% =\frac{1}{6} \left(\frac{h}{k} +\frac{k}{h} +\frac{1}{hk}\right)
%   +\frac{1}{2} -\frac{1}{2h} -\frac{1}{2k},
% \end{dmath}
% which is equivalent to the desired result.
% \end{xio}
%
% % Knuth, SNA 4.6.2, p387
% \begin{xio}
% \newcommand\mx[1]{\begin{math}#1\end{math}}% math expression
% %
% Now every column which has no circled entry is completely zero;
% so when $k=6$ and $k=7$ the algorithm outputs two more vectors,
% namely
% \begin{dseries}[frame]
% \mx{v^{[2]} =(0,5,5,0,9,5,1,0)},
% \mx{v^{[3]} =(0,9,11,9,10,12,0,1)}.
% \end{dseries}
% From the form of the matrix $A$ after $k=5$, it is evident that
% these vectors satisfy the equation $vA =(0,\dotsc,0)$.
% \end{xio}
%
% \begin{xio}
% \begin{dmath*}
% T(n) \hiderel{\leq} T(2^{\lceil\lg n\rceil})
%   \leq c(3^{\lceil\lg n\rceil}
%     -2^{\lceil\lg n\rceil})
%   <3c\cdot3^{\lg n}
%   =3c\,n^{\lg3}
% \end{dmath*}.
% \end{xio}
%
% \begin{xio}
% The reduced minimal Gr\"obner basis for $I^q_3$ consists of
% \begin{dgroup*}
% \begin{dmath*}
% H_1^3 = x_1 + x_2 + x_3
% \end{dmath*},
% \begin{dmath*}
% H_2^2 = x_1^2 + x_1 x_2 + x_2^2 - q_1 - q_2
% \end{dmath*},
% \begin{dsuspend}
% and
% \end{dsuspend}
% \begin{dmath*}
% H_3^1 = x_1^3 - 2x_1 q_1 - x_2 q_1
% \end{dmath*}.
% \end{dgroup*}
% \end{xio}
%
%
% \StopEventually{}
% \part*{Implementation}
%
% 
% The package version here is Michael's v0.90 updated by Bruce
% Miller. Michael's changes between v0.90 and his last v0.94 will be
% incorporated where applicable.
%
%
%
%
%
% \section{Introduction}
% The \pkg{breqn} package provides environments
% \env{dmath}, \env{dseries}, and \env{dgroup} for
% displayed equations with \emph{automatic line breaking},
% including automatic indention of relation symbols and binary operator
% symbols at the beginning of broken lines.    These environments
% automatically pull in following punctuation so that it can be written in
% a natural way.    The \pkg{breqn} package also provides a
% \env{darray} environment similar to the \env{array}
% environment but using \cs{displaystyle} for all the array cells and
% providing better interline spacing (because the vertical ruling
% feature of \env{array} is dropped).   
% These are all autonumbered environments like \env{equation}
% and have starred forms that don't add a number.    For a more
% comprehensive and detailed description of the features and intended
% usage of the \pkg{breqn} package see \fn{breqndoc.tex}.   
% 
% 
% 
% 
% \section{Strategy}
% Features of particular note are the ability to have
% linebreaks even within a \cs{left} \ndash  \cs{right} pair of
% delimiters, and the automatic alignment on relations and binary
% operators of a split equation.    To make \env{dmath} handle
% all this, we begin by setting the body of the equation in a special
% paragraph form with strategic line breaks whose purpose is not to
% produce line breaks in the final printed output but rather to mark
% significant points in the equation and give us entry points for
% unpacking \cn{left} \ndash  \cn{right} boxes.   
% After the initial typesetting, we take the resulting stack of line
% fragments and, working backward, splice them into a new, single-line
% paragraph; this will eventually be poured into a custom parshape, after
% we do some measuring to calculate what that parshape should be.   
% This streamlined horizontal list may contain embedded material
% from user commands intended to alter line breaks, horizontal alignment,
% and interline spacing; such material requires special handling.   
% 
% To make the `shortskip' possibility work even for
% multiline equations, we must plug in a dummy \tex  display to give us
% the value of \cs{predisplaysize}, and calculate for ourselves when
% to apply the short skips.   
% 
% In order to measure the equation body and do various
% enervating calculations on whether the equation number will fit and so
% on, we have to set it in a box.    Among other things, this means
% that we can't unhbox it inside \dbldollars  \dots  \dbldollars , or
% even \verb"$" \dots  \verb"$": \tex  doesn't allow you to
% \cs{unhbox} in math mode.    But we do want to unhbox it rather
% than just call \cs{box}, otherwise we can't take advantage of
% available shrink from \cs{medmuskip} to make equations shrink to
% fit in the available width.    So even for simple one-line equations
% we are forced to fake a whole display without going through \tex 's
% primitive display mechanism (except for using it to get
% \cs{predisplaysize} as mentioned above).   
% 
% 
% In the case of a framed equation body, the current implementation is
% to set the frame in a separate box, of width zero and height zero,
% pinned to the upper left corner of the equation body, and then print the
% equation body on top of it.   
% For attaching an equation number it would be much simpler to wrap
% the equation body in the frame and from then on treat the body as a
% single box instead of multiple line boxes.   
% But I had a notion that it might be possible some day to support
% vertical stretching of the frame.   
% 
% 
% 
% 
% \section{Prelim}
%
% This package doesn't work with \latex  2.09, nor with other
% versions of \latex  earlier than 1994/12/01.   
%    \begin{macrocode}
%<*package>
\NeedsTeXFormat{LaTeX2e}
%    \end{macrocode}
% 
% Declare package name and date.   
%    \begin{macrocode}
\ProvidesPackage{breqn}[2007/12/02 v0.95]
%    \end{macrocode}
%
%
% \section{Package options}
% 
% Most options are set with the \cs{options} command (which
% calls \cs{setkeys}) because the standard package option
% mechanism doesn't provide support for key-value syntax.   
% Cf \fn{breqndoc.tex}.   
% 
% It seems easier to turn off debugging than turn it on so the
% implementation of the \opt{debug} option is sort of backward.   
%    \begin{macrocode}
\DeclareOption{debug}{}
%    \end{macrocode}
% Process options.   
%    \begin{macrocode}
\ProcessOptions\relax
%    \end{macrocode}
% 
% 
% 
% 
% \section{Required packages}
% The \pkg{flexisym} package makes it possible to attach
% extra actions to math symbols, in particular mathbin, mathrel, mathopen,
% and mathclose symbols.   
% Normally it would suffice to call \cs{RequirePackage} without
% any extra testing, but the nature of the package is such that it is
% likely to be called earlier with different (no) options.   
% Then is it really helpful to be always warning the user about
% \quoted{Incompatible Package Options!}?   
% I don't think so.   
%    \begin{macrocode}
\@ifpackageloaded{flexisym}{}{%
  \RequirePackage[cmbase]{flexisym}[1997/01/01]
}
%    \end{macrocode}
% The \pkg{keyval} package for handling equation options.   
%    \begin{macrocode}
\RequirePackage{keyval}\relax
%    \end{macrocode}
% 
% 
% And add an \cs{options} cmd for processing package
% options that require an argument.    Maybe this will get added to
% the \pkg{keyval} package eventually.   
%    \begin{macrocode}
\@ifundefined{options}{%
%    \end{macrocode}
% 
% 
% \begin{macro}{\options}
% Get the package options and run setkeys on them.   
%    \begin{macrocode}
\newcommand{\options}[2]{%
  \expandafter\options@a\csname opt@#1.sty\endcsname{#2}%
  \setkeys{#1}{#2}%
}
%    \end{macrocode}
% \end{macro}
% 
% 
% \begin{macro}{\options@a}
% \begin{macro}{\options@b}
% \begin{macro}{\options@c}
% \begin{macro}{\options@d}
% Redefine \cs{opt@pkgname.sty} as we go along to take out
% the options that are handled and leave the ones that are not.   
%    \begin{macrocode}
\def\options@a#1#2{%
  \edef\@tempa{\options@b#2,\@empty\@nil}%
  \ifx#1\relax \let#1\@empty\fi
  \xdef#1{#1\ifx#1\@empty\@xp\@gobble\@tempa\@empty\else\@tempa \fi}%
}
%    \end{macrocode}
% Add the next option, and recurse if there remain more
% options.   
%    \begin{macrocode}
\def\options@b#1,#2#3\@nil{%
  \options@c#1 \@nil
  \ifx#2\@empty \else\options@b#2#3\@nil\fi
}
%    \end{macrocode}
% Discard everything after the first space.   
%    \begin{macrocode}
\def\options@c#1 #2\@nil{\options@d#1=\@nil}
%    \end{macrocode}
% Discard everything after the first = sign; add a comma only if the
% remainder is not empty.   
%    \begin{macrocode}
\def\options@d#1=#2\@nil{\ifx\@empty #1\@empty\else,\fi#1}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% 
% 
% 
% The tail of the \cs{@ifundefined} test.   
%    \begin{macrocode}
}{}% end @ifundefined test
%    \end{macrocode}
% 
% 
% 
% 
% \section{Some useful tools}
% 
% \begin{macro}{\@nx}
% \begin{macro}{\@xp}
% The comparative brevity of \cs{@nx} and \cs{@xp} is
% valuable not so much for typing convenience as for reducing visual
% clutter in code sections that require a lot of expansion control.   
%    \begin{macrocode}
\let\@nx\noexpand
\let\@xp\expandafter
%    \end{macrocode}
% \end{macro}
% \end{macro}
% 
% 
% \begin{macro}{\@emptytoks}
% Constant empty token register, analogous to \cs{@empty}.   
%    \begin{macrocode}
\@ifundefined{@emptytoks}{\newtoks\@emptytoks}{}
%    \end{macrocode}
% \end{macro}
% 
% 
% \begin{macro}{\f@ur}
% Constants 0\ndash 3 are provided in plain \tex , but not 4.   
%    \begin{macrocode}
\chardef\f@ur=4
%    \end{macrocode}
% \end{macro}
% 
% 
% \begin{macro}{\inf@bad}
% \cs{inf@bad} is for testing box badness.   
%    \begin{macrocode}
\newcount\inf@bad \inf@bad=1000000
%    \end{macrocode}
% \end{macro}
% 
% 
% \begin{macro}{\maxint}
% 
% We want to use \cs{maxint} rather than coerced
% \cs{maxdimen} for \cs{linepenalty} in one place.   
%    \begin{macrocode}
\newcount\maxint \maxint=2147483647
%    \end{macrocode}
% 
% \end{macro}
% 
% 
% \begin{macro}{\int@a}
% \begin{macro}{\int@b}
% \begin{macro}{\int@b}
% 
% Provide some shorter aliases for various scratch registers.   
%    \begin{macrocode}
\let\int@a=\@tempcnta
\let\int@b=\@tempcntb
\let\int@c=\count@
%    \end{macrocode}
% 
% \end{macro}
% \end{macro}
% \end{macro}
% 
% 
% \begin{macro}{\dim@a}
% \begin{macro}{\dim@b}
% \begin{macro}{\dim@c}
% \begin{macro}{\dim@d}
% \begin{macro}{\dim@e}
% \begin{macro}{\dim@A}
% 
% Same for dimen registers.   
%    \begin{macrocode}
\let\dim@a\@tempdima
\let\dim@b\@tempdimb
\let\dim@c\@tempdimc
\let\dim@d\dimen@
\let\dim@e\dimen@ii
\let\dim@A\dimen@i
%    \end{macrocode}
% 
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% 
% 
% \begin{macro}{\skip@a}
% \begin{macro}{\skip@b}
% \begin{macro}{\skip@c}
% 
% Same for skip registers.   
%    \begin{macrocode}
\let\skip@a\@tempskipa
\let\skip@b\@tempskipb
\let\skip@c\skip@
%    \end{macrocode}
% 
% \end{macro}
% \end{macro}
% \end{macro}
% 
% 
% \begin{macro}{\toks@a}
% \begin{macro}{\toks@b}
% \begin{macro}{\toks@c}
% \begin{macro}{\toks@d}
% \begin{macro}{\toks@e}
% \begin{macro}{\toks@f}
% 
% Same for token registers.   
%    \begin{macrocode}
\let\toks@a\@temptokena
\let\toks@b\toks@
\toksdef\toks@c=2
\toksdef\toks@d=4
\toksdef\toks@e=6
\toksdef\toks@f=8
%    \end{macrocode}
% 
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% 
% 
% \begin{macro}{\abs@num}
% We need an absolute value function for comparing
% penalties.   
%    \begin{macrocode}
\def\abs@num#1{\ifnum#1<\z@-\fi#1}
%    \end{macrocode}
% \end{macro}
% 
% 
% \begin{macro}{\@ifnext}
% \begin{macro}{\@ifnexta}
% The \cs{@ifnext} function is a variation of
% \cs{@ifnextchar} that doesn't skip over intervening whitespace.   
% We use it for the optional arg of \dbslash  inside
% \env{dmath} \etc  because we don't want
% unwary users to be tripped up by an unexpected attempt on \latex 's part
% to interpret a bit of math as an optional arg:
% \begin{literalcode}
% \begin{equation}
% ...\\
% [z,w]...
% \end{equation}
% \end{literalcode}
% .   
%    \begin{macrocode}
\def\@ifnext#1#2#3{%
  \let\@tempd= #1\def\@tempa{#2}\def\@tempb{#3}%
  \futurelet\@tempc\@ifnexta
}
%    \end{macrocode}
% Switch to \cs{@tempa} iff the next token matches.   
%    \begin{macrocode}
\def\@ifnexta{\ifx\@tempc\@tempd \let\@tempb\@tempa \fi \@tempb}
%    \end{macrocode}
% 
% \end{macro}
% \end{macro}
% 
% 
% \begin{macro}{\@ifstar}
% Similarly let's remove space-skipping from \cs{@ifstar}
% because in some rare case of \dbslash  inside an equation, followed by
% a space and a \verb"*" where the \verb"*" is intended as the math
% binary operator, it would be a disservice to gobble the star as an
% option of the \dbslash  command.    In all other contexts the chance
% of having a space \emph{before} the star is extremely small: either
% the command is a control word which will get no space token after it in
% any case because of \tex 's tokenization rules; or it is a control
% symbol such as \dbslash  \verb"*" which is exceedingly unlikely to be
% written as \dbslash  \verb"*" by any one who really wants the
% \verb"*" to act as a modifier for the \dbslash  command.   
%    \begin{macrocode}
\def\@ifstar#1#2{%
  \let\@tempd*\def\@tempa*{#1}\def\@tempb{#2}%
  \futurelet\@tempc\@ifnexta
}
%    \end{macrocode}
% \end{macro}
% 
% 
% \begin{macro}{\@optarg}
% Utility function for reading an optional arg
% \emph{without} skipping over any intervening spaces.   
%    \begin{macrocode}
\def\@optarg#1#2{\@ifnext[{#1}{#1[#2]}}
%    \end{macrocode}
% 
% \end{macro}
% 
% 
% \begin{macro}{\@True}
% \begin{macro}{\@False}
% \begin{macro}{\@Not}
% \begin{macro}{\@And}
% After \verb"\let\foo\@True" the test
% \begin{literalcode}
% \if\foo
% \end{literalcode}
% evaluates to true.    Would rather avoid \cs{newif} because it
% uses three csnames per Boolean variable; this uses only one.   
%    \begin{macrocode}
\def\@True{00}
\def\@False{01}
\def\@Not#1{0\ifcase#11 \or\@xp 1\else \@xp 0\fi}
\def\@And#1#2{0\ifcase#1#2 \@xp 0\else \@xp 1\fi}
\def\@Or#1#2{0\ifnum#1#2<101 \@xp 0\else \@xp 1\fi}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% 
% 
% 
%    \begin{macrocode}
\def\theb@@le#1{\if#1 True\else False\fi}
%    \end{macrocode}
% \begin{macro}{\freeze@glue}
% 
% Remove the stretch and shrink from a glue register.   
%    \begin{macrocode}
\def\freeze@glue#1{#11#1\relax}
%    \end{macrocode}
% 
% \end{macro}
% \begin{macro}{\z@rule}
% \begin{macro}{\keep@glue}
% Note well
% the intentional absence of \cs{relax} at the end of the replacement
% text of \cs{z@rule}; use it with care.   
%    \begin{macrocode}
\def\z@rule{\vrule\@width\z@}% no \relax ! use with care
%    \end{macrocode}
% Different ways to keep a bit of glue from disappearing at the
% beginning of a line after line breaking:
% \begin{itemize}
% \item Zero-thickness rule
% 
%  
% \item Null character
% 
%  
% \item \cs{vadjust}\verb"{}" (\texbook , Exercise ??)
% 
%  
% \end{itemize}
%  .    The null character idea would be nice except it
% creates a mathord which then screws up math spacing for \eg  a following
% unary minus sign.    (the vrule \emph{is} transparent to
% the math spacing).    The vadjust is the cheapest in terms of box
% memory\mdash it vanishes after the pass through \tex 's
% paragrapher.   
% It is what I would have used, except that the equation contents get
% run through two paragraphing passes, once for breaking up LR boxes and
% once for the real typesetting.   
% If \cs{keep@glue} were done with an empty vadjust, it would
% disappear after the first pass and\mdash in particular\mdash the
% pre-bin-op adjustment for relation symbols would disappear at a line break.   
%    \begin{macrocode}
\def\keep@glue{\z@rule\relax}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% 
% 
% \begin{macro}{\replicate}
% 
% This is a fully expandable way of making N copies of a token
% list.   
% Based on a post of David Kastrup to comp.text.tex circa January
% 1999.   
% The extra application of \cs{number} is needed for maximal
% robustness in case the repeat count N is given in some weird \tex  form
% such as \verb""E9" or \verb"\count9".   
%    \begin{macrocode}
% usage: \message{H\replicate{5}{i h}ow de doo dee!}
\begingroup \catcode`\&=11
\gdef\replicate#1{%
  \csname &\expandafter\replicate@a\romannumeral\number\number#1 000q\endcsname
}
\endgroup
%    \end{macrocode}
% 
% \end{macro}
% 
% 
% \begin{macro}{\replicate@a}
% 
%    \begin{macrocode}
\long\def\replicate@a#1#2\endcsname#3{#1\endcsname{#3}#2}
%    \end{macrocode}
% 
% \end{macro}
% 
% 
% \begin{macro}{\8m}% fix
% 
%    \begin{macrocode}
\begingroup \catcode`\&=11
\long\gdef\&m#1#2{#1\csname &#2\endcsname{#1}}
\endgroup
%    \end{macrocode}
% 
% \end{macro}
% 
% 
% \begin{macro}{\8q}% fix
% 
%    \begin{macrocode}
\@xp\let\csname\string &q\endcsname\@gobble
%    \end{macrocode}
% 
% \end{macro}
% 
% \begin{macro}{\mathchars@reset}
% 
% Need to patch up this function from flexisym a little, to better
% handle certain constructed symbols like \cs{neq}.   
%    \begin{macrocode}
\g@addto@macro\mathchars@reset{%
  \let\@symRel\@secondoftwo \let\@symBin\@secondoftwo
  \let\@symDeL\@secondoftwo \let\@symDeR\@secondoftwo
  \let\@symDeB\@secondoftwo
}
%    \end{macrocode}
% 
% \end{macro}
% 
% 
% \begin{macro}{\eq@cons}
% 
% \latex 's \cs{@cons} appends to the end of a list, but we need
% a function that adds material at the beginning.   
%    \begin{macrocode}
\def\eq@cons#1#2{%
  \begingroup \let\@elt\relax \xdef#1{\@elt{#2}#1}\endgroup
}
%    \end{macrocode}
% 
% \end{macro}
% \begin{macro}{\@saveprimitive}
% If some preceding package redefined one of the
% primitives that we must change, we had better do some checking to make
% sure that we are able to save the primitive meaning for internal use.   
% This is handled by the \cs{@saveprimitive} function.    We
% follow the example of \cs{@@input} where the primitive meaning is
% stored in an internal control sequence with a \verb"@@" prefix.   
% Primitive control sequences can be distinguished by the fact that
% \cs{string} and \cs{meaning} return the same information.   
% Well, not quite all: \cs{nullfont} and \cs{topmark}
% and the other \cs{...mark} primitives being the exceptions.   
%    \begin{macrocode}
\providecommand{\@saveprimitive}[2]{%
  \begingroup
  \edef\@tempa{\string#1}\edef\@tempb{\meaning#1}%
  \ifx\@tempa\@tempb \global\let#2#1%
  \else
%    \end{macrocode}%
% If [arg1] is no longer primitive, then we are in trouble unless
% [arg2] was already given the desired primitive meaning somewhere
% else.   
%    \begin{macrocode}
    \edef\@tempb{\meaning#2}%
    \ifx\@tempa\@tempb
    \else \@saveprimitive@a#1#2%
    \fi
  \fi
  \endgroup
}
%    \end{macrocode}
% Aux function, check for the special cases.   
% Most of the time this branch will be skipped so we can
% stuff a lot of work into it without worrying about speed costs.   
%    \begin{macrocode}
\def\@saveprimitive@a#1#2{%
  \begingroup
  \def\@tempb##1#1##2{\edef\@tempb{##2}\@car{}}%
  \@tempb\nullfont{select font nullfont}%
    \topmark{\string\topmark:}%
    \firstmark{\string\firstmark:}%
    \botmark{\string\botmark:}%
    \splitfirstmark{\string\splitfirstmark:}%
    \splitbotmark{\string\splitbotmark:}%
    #1{\string#1}%
  \edef\@tempa{\expandafter\strip@prefix\meaning\@tempb}%
  \edef\@tempb{\meaning#1}%
  \ifx\@tempa\@tempb \global\let#2#1%
  \else
    \PackageError{breqn}%
      {Unable to properly define \string#2; primitive
      \noexpand#1no longer primitive}\@eha
    \fi
  \fi
  \endgroup
}
%    \end{macrocode}
% \end{macro}
% 
% 
% \begin{macro}{\@@math}
% \begin{macro}{\@@endmath}
% \begin{macro}{\@@display}
% \begin{macro}{\@@enddisplay}
% Move the math-start and math-end functions into control
% sequences.    If I were redesigning \tex  I guess I'd put these
% functions into primitive control words instead of linking them to a
% catcode.    That way \tex  would not have to do the special
% lookahead at a \verb"$" to see if there's another one coming up.   
% Of course that's related to the question of how to provide user
% shorthand for common constructions: \tex , or an editing interface of
% some sort.   
%    \begin{macrocode}
\begingroup \catcode`\$=3 % just to make sure
  \global\let\@@math=$ \gdef\@@display{$$}% $$$
\endgroup
\let\@@endmath=\@@math
\let\@@enddisplay=\@@display
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% 
% 
% \begin{macro}{\@@insert}
% \begin{macro}{\@@mark}
% \begin{macro}{\@@vadjust}
% Save the primitives \cs{vadjust}, \cs{insert},
% \cs{mark} because we will want to change them locally during
% equation measuring to keep them from getting in the way of our vertical
% decomposition procedures.    We follow the example of
% \cs{@@input}, \cs{@@end}, \cs{@@par} where the primitive
% meaning is stored in an internal control sequence with a \verb"@@"
% prefix.   
%    \begin{macrocode}
\@saveprimitive\vadjust\@@vadjust
\@saveprimitive\insert\@@insert
\@saveprimitive\mark\@@mark
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% 
% 
% 
% 
% \section{Debugging}
% Debugging help.   
% 
% 
% \begin{macro}{\debug}
% 
%    \begin{macrocode}
\let\debug=\begingroup
%    \end{macrocode}
% 
% \end{macro}
% 
% 
% \begin{macro}{\gubed}
% 
%    \begin{macrocode}
\let\gubed=\endgroup
%    \end{macrocode}
% 
% \end{macro}
% 
% 
% \begin{macro}{\debugmsg}
% Print a debugging message.   
%    \begin{macrocode}
\def\debugmsg{\message{||= \iffalse}\fi
  \@xp\@gobble\string
}
%    \end{macrocode}
% 
% \end{macro}
% 
% 
% \begin{macro}{\debugwr}
% 
% Sometimes the newline behavior of \cs{message} is
% unsatisfactory; this provides an alternative.   
%    \begin{macrocode}
\def\debugwr#1{\immediate\write\sixt@@n{||= #1}}
%    \end{macrocode}
% 
% \end{macro}
% 
% 
% \begin{macro}{\debug@box}
% 
% Record the contents of a box in the log file, without stopping.   
%    \begin{macrocode}
\def\debug@box#1{%
  \batchmode{\showboxbreadth\maxdimen\showboxdepth99\showbox#1}%
  \errorstopmode
}
%    \end{macrocode}
% 
% \end{macro}
% 
% 
% \begin{macro}{\eqinfo}
% 
% Show lots of info about the material before launching into the
% trials.   
%    \begin{macrocode}
\def\eqinfo{%
  \debug@box\EQ@copy
  \wlog{!! EQ@copy: \the\wd\EQ@copy\space x
    \the\ht\EQ@copy+\the\dp\EQ@copy
  }%
}
%    \end{macrocode}
% 
% \end{macro}
% 
% 
% \begin{macro}{\debug@para}
% 
% Check params that affect line breaking.   
%    \begin{macrocode}
\def\debug@para{%
  \debugwr{\hsize\the\hsize, \parfillskip\the\parfillskip}%
  \debugmsg{\leftskip\the\leftskip, \rightskip\the\rightskip}%
  \debugmsg{\linepenalty\the\linepenalty, \adjdemerits\the\adjdemerits}%
  \debugmsg{\pretolerance\the\pretolerance, \tolerance\the\tolerance,
    \parindent\the\parindent}%
}
%    \end{macrocode}
% 
% \end{macro}
% 
% 
% Turn off debugging unless it was asked for.   
%    \begin{macrocode}
\@ifpackagewith{breqn}{debug}{}{%
  \let\debug\relax \let\gubed\relax
  \let\debugmsg\@gobble \let\debug@lines\relax \let\debug@para\relax
  \let\debugwr\@gobble
  \let\debug@box\@gobble \let\debug@push\@gobbletwo
}
%    \end{macrocode}
% 
% 
% 
% 
% \section{The \cs{listwidth} variable}
% The dimen variable \cs{listwidth} is \cs{linewidth}
% plus \cs{leftmargin} plus \cs{rightmargin}, which is typically
% less than \cs{hsize} if the list depth is greater than one.   
% In case a future package will provide this variable, define it only
% if not yet defined.   
%    \begin{macrocode}
\@ifundefined{listwidth}{\newdimen\listwidth}{}
\listwidth=\z@
%    \end{macrocode}
% 
% 
% 
% 
% \section{Parameters}
% A stunning cornucopia of them, in fact.    I wanted to make a
% table but a purely documentary table would be highly redundant with the
% following code section and didn't strike me as wise maintenance policy,
% so instead I formatted the source code itself into a crude table and
% made a helper function to make more room for comments on each line.   
% 
% 
% \begin{macro}{\eqfontsize}
% \begin{macro}{\eqcolor}
% \begin{macro}{\eqmargin}
% \begin{macro}{\eqindent}
% \begin{macro}{\eqbinoffset}
% \begin{macro}{\eqnumside}
% \begin{macro}{\eqnumplace}
% \begin{macro}{\eqnumsep}
% \begin{macro}{\eqnumfont}
% \begin{macro}{\eqnumform}
% \begin{macro}{\eqnumsize}
% \begin{macro}{\eqnumcolor}
% \begin{macro}{\eqlinespacing}
% \begin{macro}{\eqlineskip}
% \begin{macro}{\eqlineskiplimit}
% \begin{macro}{\eqstyle}
% \begin{macro}{\eqinterlinepenalty}
% \begin{macro}{\intereqpenalty}
% \begin{macro}{\intereqskip}
% 
% Note: avoid M, m, P, p because they look like they might be the
% start of a keyword \quoted{minus} or \quoted{plus}.    Then
% \tex  looks further to see if the next letter is i or l.    And if
% the next thing is an undefined macro, the attempt to expand the macro
% results in an error message.   
%    \begin{macrocode}
\def\do#1#2{\begingroup
  \def\?##1#1##2##3##4##5\@nil{\endgroup##2##3\afterassignment\do##4}%
  \?C\newcount#2#2D\newdimen#2#2S\newskip#2#2U\newmuskip#2#2%
    K\newtoks#2#2F\newif#2{\z@\z@}T\newif#2{\let#2\iftrue}%
    B\newbox#2{\z@\z@}d{\newcommand#2{}}{}{\def#2}%
    Q\relax\@gobbletwo\relax \@nil}%
\do % def, Count, Dimen, Skip, mUskip, toKs, Box, False, True
d\eqfontsize{}         % Inherit from context    [NOT USED?]
d\eqcolor{black}       % Default to black        [NOT USED?]
D\eqnumsep=10pt        % Min space between equ number and body
D\eqmargin=8pt         % For `multline' gap emulation
%    \end{macrocode}
% The \cs{eqindent} and \cs{eqnumside} variables need to
% have their values initialized from context, actually.    But
% that takes a bit of work, which is postponed till later.   
%    \begin{macrocode}
d\eqindent{C}%         % C or I, centered or indented
d\eqnumside{R}%        % R or L, right or left
d\eqnumplace{M}%       % M or T or B, middle top or bottom
%    \end{macrocode}
% Typesetting the equation number is done thus:
% \begin{literalcode}
% {\eqnumcolor \eqnumsize \eqnumfont{\eqnumform{\eq@number}}}
% \end{literalcode}
% .   
%    \begin{macrocode}
%d\eqnumfont{\upshape}% % Upright even when surrounding text is slanted
d\eqnumfont{}%         % Null for easier debugging [mjd,1997/09/26]
d\eqnumform#1{(#1\@@italiccorr)} % Add parens
d\eqnumsize{}          % Allow numbers to have different typesize ...
%    \end{macrocode}
% Tricky questions on \cs{eqnumsize}.    Should the default
% be \cs{normalsize}?    Then the user can scale down the
% equation body with \cs{small} and not affect the equation
% number.    Or should the default be empty?    Then in large
% sections of smaller text, like the dangerous bend stuff in
% \emph{\tex book}, the equation number size will keep in synch
% with the context.   
% Maybe need an \cs{eqbodysize} param as well to allow separating
% the two cases.   
%    \begin{macrocode}
d\eqnumcolor{}         % ... or color than eq body e.g. \color{blue}
S\eqlinespacing=14pt plus2pt % Base-to-base space between lines
S\eqlineskip=3pt plus2pt % Min space if eqlinespacing too small
D\eqlineskiplimit=2pt  % Threshold for switching to eqlineskip
%    \end{macrocode}
% The value of \cs{eqbinoffset} should include a negative shrink
% component that cancels the shrink component of medmuskip, otherwise
% there can be a noticeable variation in the indent of adjacent lines if
% one is shrunken a lot and the other isn't.   
%    \begin{macrocode}
U\eqbinoffset=15mu minus-3mu % Offset from mathrel alignment pt for mathbins
U\eqdelimoffset=2mu    % Additional offset for break inside delims
D\eqindentstep=8pt     % Indent used when LHS wd is n/a or too large
K\eqstyle={}           % Customization hook
C\eqbreakdepth=2       % Allow breaks within delimiters to this depth
C\eqinterlinepenalty=10000 % No page breaks between equation lines
C\intereqpenalty=1000   % Pagebreak penalty between equations [BRM: Was \@M]
S\intereqskip=3pt plus2pt % Additional vert space between equations
C\prerelpenalty=-\@M   % Linebreak penalty before mathrel symbols
C\prebinoppenalty=888  % Linebreak penalty before mathbins
%    \end{macrocode}
% When breaking equations we never right-justify, so a stretch
% component of the muskip is never helpful and sometimes it is definitely
% undesirable.    Note that thick\slash medmuskips frozen inside a
% fraction or radical may turn out noticeably larger than neighboring
% unfrozen ones.    Nonetheless I think this way is the best
% compromise short of a new \tex  that can make those built-up objects
% shrink horizontally in proportion; the alternative is to pretty much
% eliminate the shrink possibility completely in displays.   
%    \begin{macrocode}
U\Dmedmuskip=4mu minus 3mu % medmuskip in displays
U\Dthickmuskip=5mu minus 2mu % thickmuskip in displays
Q\relax                % End of assignments
%    \end{macrocode}
% 
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% 
% And now some internal variables.    1997/10/22: some of
% these are dead branches that need to be pruned.   
%    \begin{macrocode}
\do % def, Dimen, Skip, mUskip, toKs, Box, False, True
d\eq@number{}          % Internal variable
S\eqleftskip=\@centering  % Space on the left  [NOT USED?]
S\eqrightskip=\@centering % Space on the right [NOT USED?]
S\eq@vspan=\z@skip     % Glue used to vcenter the eq number
U\eq@binoffset=\eqbinoffset % Roughly, \eqbinoffset + \eqdelimoffset
B\EQ@box               % Storage for equation body
B\EQ@copy              % For eq body sans vadjust/insert/mark material
B\EQ@numbox            % For equation number
D\eq@wdNum=0pt         % width of number + separation [NEW]
B\GRP@numbox            % For group number [NEW]
D\grp@wdNum=0pt         % width of number + separation [NEW]
%%B\EQ@vimbox            % Vadjust, insert, or mark material
%%B\EQ@vimcopy           % Spare copy of same
%%B\eq@impinging         % Temporary box for measuring number placement
%%T\if@eq@number         % Number present or not? [BRM: USE \@True|\@False style instead]
C\eq@lines=\z@         % Internal counter, actual number of lines
C\eq@curline=\z@       % Loop counter
C\eq@badness=\z@       % Used in testing for overfull lines
C\EQ@vims=\z@          % For bookkeeping
Q\relax
%% BRM: Use \@True|\@False logic instead of \newif
%% \@eq@numbertrue => \let\eq@hasNumber\@True
%% \@eq@numberfalse => \let\eq@hasNumber\@False
%% \if@eq@number => \if\eq@hasNumber
\def\@eq@numbertrue{\let\eq@hasNumber\@True}%
\def\@eq@numberfalse{\let\eq@hasNumber\@False}%
\let\eq@hasNumber\@False
%    \end{macrocode}
% Here for the dimens, it would be advisable to do some more careful
% management to conserve dimen registers.    First of all, most of the
% dimen registers are needed in the measuring phase, which is a tightly
% contained step that happens after the contents of the equation have been
% typeset into a box and before any external functions have a chance to
% regain control\mdash  \eg , the output routine.   
% Therefore it is possible to make use of the the dimen registers 0--9,
% reserved by convention for scratch use, without fear of conflict with
% other macros.    But I don't want to use them directly with the
% available names:
% \begin{literalcode}
% \dimen@ \dimen@i \dimen@ii \dimen3 \dimen4 ... \dimen9
% \end{literalcode}
% .    It would be much more useful to have names for these registers
% indicative of way they are used.   
% 
% Another source whence dimen registers could be borrowed is the
% \pkg{amsmath} package, which allocates six registers for
% equation-measuring purposes.    We can reuse them under different
% names since the \pkg{amsmath} functions and our functions will
% never be used simultaneously.   
% \begin{literalcode}
% \eqnshift@ \alignsep@ \tagshift@ \tagwidth@ \totwidth@ \lineht@
% \end{literalcode}
%    \begin{macrocode}
\newdimen\eq@dp
\newdimen\eq@wdL \newdimen\eq@wdT \newdimen\eq@wdMin
\newdimen\grp@wdL \newdimen\grp@wdR \newdimen\grp@wdT
\newdimen\eq@wdRmax \newdimen\eq@firstht
% BRM: measure the condition too.
\newdimen\eq@wdCond
\newdimen\eq@indentstep \newdimen\eq@linewidth
\newdimen\grp@linewidth
%    \end{macrocode}
% Maybe \cs{eq@hshift} could share the same register as
% \cs{mathindent} [mjd,1997/10/22].   
%    \begin{macrocode}
\newdimen\eq@hshift
\let\eq@isIntertext\@False
%    \end{macrocode}
% These are scratch variables, they get reset in every equation; so we
% don't need to provide initialization values here.   
%    \begin{macrocode}
\def\do#1#2{\if Q#1\relax \else\@xp\do\fi}\do
D\eq@wdT        % Total width for framing
D\eq@wdMin      % Width of narrowest line in equation
D\eq@wdL        % Width of the left-hand-side
D\grp@wdL       % Max width of LHS's in a group
D\grp@wdR       % Max RHS of all equations in a group
D\eq@firstht    % Height of first line
D\eq@dp         % Depth of last line
D\eq@indentstep % Indent amount when LHS is not present
D\eq@linewidth  % Width actually used for display
D\grp@linewidth % Max eq@linewidth over a group
Q\relax
%    \end{macrocode}
% Init \cs{eq@indentstep} to a nonzero value so that we can
% detect and refrain from clobbering a user setting of zero.   
% And \cs{eq@sidespace} to \cs{maxdimen} because
% that is the right init before computing a min.   
%    \begin{macrocode}
\eq@indentstep=\maxdimen
\let\given@sidespace\@empty
%    \end{macrocode}
% 
% \begin{macro}{\eq@overrun}
% 
% Not a dimen register; don't need to advance it.   
%    \begin{macrocode}
\def\eq@overrun{0pt}
%    \end{macrocode}
% 
% \end{macro}
% 
% 
% To initialize \cs{eqnumside} and \cs{eqindent} properly,
% we may need to grub around a bit in \cs{@filelist}.    However,
% if the \pkg{amsmath} package was used, we can use its option
% data.    More trouble: if a documentclass sends an option of
% \opt{leqno} to \pkg{amsmath} by default, and it gets
% overridden by the user with a \opt{reqno} documentclass option,
% then \pkg{amsmath} believes itself to have received
% \emph{both} options.   
%    \begin{macrocode}
\@ifpackagewith{amsmath}{leqno}{%
  \@ifpackagewith{amsmath}{reqno}{}{\def\eqnumside{L}}%
}{%
%    \end{macrocode}
% If the \pkg{amsmath} package was not used, the next
% method for testing the \opt{leqno} option is to see if
% \fn{leqno.clo} is present in \cs{@filelist}.   
%    \begin{macrocode}
  \def\@tempa#1,leqno.clo,#2#3\@nil{%
    \ifx @#2\relax\else \def\eqnumside{L}\fi
  }%
  \@xp\@tempa\@filelist,leqno.clo,@\@nil
%    \end{macrocode}
% Even that test may fail in the case of \cls{amsart} if it does
% not load \pkg{amsmath}.    Then we have to look whether
% \cs{iftagsleft@} is defined, and if so whether it is true.   
% This is tricky if you want to be careful about conditional nesting
% and don't want to put anything in the hash table unnecessarily.   
%    \begin{macrocode}
  \if L\eqnumside
  \else
    \@ifundefined{iftagsleft@}{}{%
      \edef\eqnumside{%
        \if TT\csname fi\endcsname\csname iftagsleft@\endcsname
          L\else R\fi
      }%
    }
  \fi
}
%    \end{macrocode}
% A similar sequence of tests handles the \quoted{fleqn or not fleqn}
% question for the \cls{article} and \cls{amsart}
% documentclasses.   
%    \begin{macrocode}
\@ifpackagewith{amsmath}{fleqn}{%
  \def\eqindent{I}%
}{%
  \def\@tempa#1,fleqn.clo,#2#3\@nil{%
    \ifx @#2\relax\else \def\eqindent{I}\fi
  }%
  \@xp\@tempa\@filelist,fleqn.clo,@\@nil
  \if I\eqindent
  \else
    \@ifundefined{if@fleqn}{}{%
      \edef\eqindent{%
        \if TT\csname fi\endcsname\csname if@fleqn\endcsname
          I\else C\fi
      }%
    }%
  \fi
}
%    \end{macrocode}
% BRM: This conditional implies we must use ALL indented or ALL centered?
%    \begin{macrocode}
%\if I\eqindent
  \@ifundefined{mathindent}{%
    \newdimen\mathindent
  }{%
    \@ifundefined{@mathmargin}{}{%
      \mathindent\@mathmargin
    }%
  }
%\fi
%    \end{macrocode}
% 
% 
% 
% 
% \section{Measuring equation components}
% Measure the left-hand side of an equation.    This
% function is called by mathrel symbols.    For the first mathrel we
% want to discourage a line break more than for following mathrels; so
% \cs{mark@lhs} gobbles the following \cs{rel@break} and
% substitutes a higher penalty.   
% \begin{aside}
% Maybe the LHS should be kept in a separate box.   
% \end{aside}
% 
% 
% 
% \begin{macro}{\EQ@hasLHS}
% 
% Boolean: does this equation have a \dquoted{left-hand side}?   
%    \begin{macrocode}
\let\EQ@hasLHS=\@False
%    \end{macrocode}
% 
% \end{macro}
% 
% 
% \begin{macro}{\EQ@QED}
% 
% If nonempty: the qed material that should be incorporated into this
% equation after the final punctuation.   
%    \begin{macrocode}
\let\EQ@QED=\@empty
%    \end{macrocode}
% 
% \end{macro}
% 
% 
% \begin{macro}{\mark@lhs}
% 
%    \begin{macrocode}
\def\mark@lhs#1{%
  \ifnum\lr@level<\@ne
    \let\mark@lhs\relax
    \global\let\EQ@hasLHS=\@True
    \global\let\EQ@prebin@space\EQ@prebin@space@a
    \mark@lhs@a
%    \end{macrocode}
% But the penalty for the first mathrel should still be lower than a
% binoppenalty.    If not, when the LHS contains a binop, the split
% will occur inside the LHS rather than at the mathrel.   
% On the other hand if we end up with a multline sort of equation
% layout where the RHS is very short, the break before the relation symbol
% should be made \emph{less} desirable than the breakpoints inside
% the LHS.   
% Since a lower penalty takes precedence over a higher one, we start
% by putting in the highest relpenalty; during subsequent measuring if we
% find that that RHS is not excessively short then we put in an extra
% \dquoted{normal} relpenalty when rejoining the LHS and RHS.   
%    \begin{macrocode}
    \penalty9999 % instead of normal \rel@break
  % else no penalty = forbid break
  \fi
}
%    \end{macrocode}
% 
% \end{macro}
% 
% 
% \begin{macro}{\mark@lhs@a}
% 
% Temporarily add an extra thickmuskip to the LHS; it will be removed
% later.    This is necessary to compensate for the disappearance of
% the thickmuskip glue preceding a mathrel if a line break is taken at
% that point.    Otherwise we would have to make our definition of
% mathrel symbols more complicated, like the one for mathbins.    The
% penalty of $2$ put in with vadjust is a flag for
% \cs{eq@repack} to suggest that the box containing this line should
% be measured to find the value of \cs{eq@wdL}.    The
% second vadjust ensures that the normal prerelpenalty and thickmuskip
% will not get lost at the line break during this preliminary pass.   
%
% BRM: I originally thought the \verb"\mskip\thickmuskip" was messing
% up summation limits in LHS.  But I may have fixed that problem by
% fixing other things\ldots
%    \begin{macrocode}
\def\mark@lhs@a{%
  \mskip\thickmuskip \@@vadjust{\penalty\tw@}\penalty-\@Mi\@@vadjust{}%
}
%    \end{macrocode}
% 
% \end{macro}
% 
% 
% \begin{macro}{\hiderel}
% If you want the LHS to extend past the first mathrel symbol to a
% following one, mark the first one with \cs{hiderel}:
% \begin{literalcode}
% a \hiderel{=} b = c...
% \end{literalcode}
% .   
% \begin{aside}
% I'm not sure now why I didn't use \cs{begingroup}
% \cs{endgroup} here \begin{dn}
% mjd,1999/01/21
% \end{dn}
% .   
% \end{aside}
% 
%    \begin{macrocode}
\newcommand\hiderel[1]{\mathrel{\advance\lr@level\@ne#1}}
%    \end{macrocode}
% \end{macro}
% 
% 
% \begin{macro}{\m@@Bin}
% \begin{macro}{\m@@Rel}
% \begin{macro}{\bin@break}
% \begin{macro}{\rel@break}
% \begin{macro}{\bin@mark}
% \begin{macro}{\rel@mark}
% \begin{macro}{\d@@Bin}
% \begin{macro}{\d@@Rel}
% 
% \cf  \pkg{flexisym} handling of mathbins and mathrels.    These
% are alternate definitions of \cs{m@Bin} and \cs{m@Rel},
% activated by \cs{display@setup}.   
%    \begin{macrocode}
\let\m@@Bin\m@Bin
\let\m@@Rel\m@Rel
\let\EQ@prebin@space\relax
\def\EQ@prebin@space@a{\mskip-\eq@binoffset \keep@glue \mskip\eq@binoffset}
\def\bin@break{\ifnum\lastpenalty=\z@\penalty\prebinoppenalty\fi
  \EQ@prebin@space}
\def\rel@break{%
  \ifnum\abs@num\lastpenalty <\abs@num\prerelpenalty
    \penalty\prerelpenalty
  \fi
}
\def\d@@Bin{\bin@break \m@@Bin}
\def\d@@Rel{\mark@lhs \rel@break \m@@Rel}
%    \end{macrocode}
% The difficulty of dealing properly with the subscripts and
% superscripts sometimes appended to mathbins and mathrels is one of the
% reasons that we do not attempt to handle the mathrels as a separate
% \quoted{column} a la \env{eqnarray}.   
% 
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% 
% 
% \begin{macro}{\m@@symRel}
% \begin{macro}{\d@@symRel}
% \begin{macro}{\m@@symBin}
% \begin{macro}{\d@@symBin}
% \begin{macro}{\m@@symDel}
% \begin{macro}{\d@@symDel}
% \begin{macro}{\m@@symDeR}
% \begin{macro}{\d@@symDeR}
% \begin{macro}{\m@@symDeB}
% \begin{macro}{\d@@symDeB}
% \begin{macro}{\m@@symDeA}
% \begin{macro}{\d@@symDeA}
% 
% More of the same.   
%    \begin{macrocode}
\let\m@@symRel\@symRel \def\d@@symRel{\mark@lhs \rel@break \m@@symRel}
\let\m@@symBin\@symBin \def\d@@symBin{\bin@break \m@@symBin}
\let\m@@symDel\@symDel
\let\m@@symDeR\@symDeR
\let\m@@symDeB\@symDeB
\let\m@@symDeA\@symDeA
%    \end{macrocode}
% 
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% 
% 
% \begin{macro}{\display@setup}
% \begin{macro}{\everydisplay}
% Setup.    Note that \latex  reserves the primitive
% \cs{everydisplay} under the name \cs{frozen@everydisplay}.   
% BRM: Disable this! It also affects non-breqn math!!!!
%    \begin{macrocode}
%\global\everydisplay\expandafter{\the\everydisplay \display@setup}
%    \end{macrocode}
% Change some math symbol function calls.   
%    \begin{macrocode}
\def\display@setup{%
  \medmuskip\Dmedmuskip \thickmuskip\Dthickmuskip
  \let\m@Bin\d@@Bin \let\m@Rel\d@@Rel
  \let\@symRel\d@@symRel \let\@symBin\d@@symBin
  \let\m@DeL\d@@DeL \let\m@DeR\d@@DeR \let\m@DeB\d@@DeB
  \let\m@DeA\d@@DeA
  \let\@symDeL\d@@symDeL \let\@symDeR\d@@symDeR
  \let\@symDeB\d@@symDeB \let\@symDeA\d@@symDeA
  \let\left\eq@left \let\right\eq@right \global\lr@level\z@
  \global\eq@wdCond\z@          %BRM: new
%    \end{macrocode}
% If we have an embedded array environment (for example), we
% don't want to have each math cell within the array resetting
% \cs{lr@level} globally to 0\mdash not good!   
% And in general I think it is safe to say that whenever we have a
% subordinate level of boxing we want to revert to a normal math setup.   
%    \begin{macrocode}
  \everyhbox{\everyhbox\@emptytoks
    \let\display@setup\relax \textmath@setup \let\textmath@setup\relax
  }%
  \everyvbox{\everyvbox\@emptytoks
    \let\display@setup\relax \textmath@setup \let\textmath@setup\relax
  }%
}
%    \end{macrocode}
% The \cs{textmath@setup} function is needed for embedded inline
% math inside text inside a display.   
%
% BRM: DS Experiment: Variant of \cs{display@setup} for use within
% dseries environmnents
%    \begin{macrocode}
\def\dseries@display@setup{%
  \medmuskip\Dmedmuskip \thickmuskip\Dthickmuskip
  \let\m@Bin\d@@Bin 
%\let\m@Rel\d@@Rel
%  \let\@symRel\d@@symRel
 \let\@symBin\d@@symBin
  \let\m@DeL\d@@DeL \let\m@DeR\d@@DeR \let\m@DeB\d@@DeB
  \let\m@DeA\d@@DeA
  \let\@symDeL\d@@symDeL \let\@symDeR\d@@symDeR
  \let\@symDeB\d@@symDeB \let\@symDeA\d@@symDeA
  \let\left\eq@left \let\right\eq@right \global\lr@level\z@
  \everyhbox{\everyhbox\@emptytoks
    \let\display@setup\relax \textmath@setup \let\textmath@setup\relax
  }%
  \everyvbox{\everyvbox\@emptytoks
    \let\display@setup\relax \textmath@setup \let\textmath@setup\relax
  }%
 \displaystyle
}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\textmath@setup{%
  \let\m@Bin\m@@Bin \let\m@Rel\m@@Rel
  \let\@symRel\m@@symRel \let\@symBin\m@@symBin
  \let\m@DeL\m@@DeL \let\m@DeR\m@@DeR \let\m@DeB\m@@DeB
  \let\m@DeA\m@@DeA
  \let\@symDeL\m@@symDeL \let\@symDeR\m@@symDeR
  \let\@symDeB\m@@symDeB \let\@symDeA\m@@symDeA
  \let\left\@@left \let\right\@@right
}
%    \end{macrocode}
% 
% \end{macro}
% \end{macro}
% 
% \begin{macro}{\if@display}
% \begin{macro}{\everydisplay}
% The test \cs{ifinner} is unreliable for distinguishing
% whether we are in a displayed formula or an inline formula: any display
% more complex than a simple one-line equation typically involves the use
% of \verb"$" \cs{displaystyle} \dots  \verb"$" instead of
% \dbldollars  \dots  \dbldollars .    So we provide a more reliable
% test.    But it might have been provided already by the
% \pkg{amsmath} package.   
%    \begin{macrocode}
\@ifundefined{@displaytrue}{%
  \@xp\newif\csname if@display\endcsname
  \everydisplay\@xp{\the\everydisplay \@displaytrue}%
}{}
%    \end{macrocode}
% 
% \begin{aside}
% Is there any reason to maintain separate
% \cs{everydisplay} and \cn{eqstyle}?   
% 
% \end{aside}
% 
% 
% \end{macro}
% \end{macro}
% 
% 
% 
% 
% \section{The \env{dmath} and \env{dmath*} environments}
%
% Options for the \env{dmath} and \env{dmath*}
% environments.   
%    \begin{macrocode}
% \begin{dmath}[label={xyz}]
\define@key{breqn}{label}{\def\next@label{\label{#1}}}
\global\let\next@label\@empty
%    \end{macrocode}
% Allow a variant number.   
%    \begin{macrocode}
% \begin{dmath}[number={\nref{foo}\textprime}]
\define@key{breqn}{number}{\def\eq@number{#1}%
  \let\@currentlabel\eq@number
}
% \begin{dmath}[shiftnumber]
\define@key{breqn}{shiftnumber}{\let\eq@shiftnumber\@True}
% \begin{dmath}[holdnumber]
\define@key{breqn}{holdnumber}{\let\eq@holdnumber\@True}
% \begin{dmath}[density={.5}]
\define@key{breqn}{density}{\def\eq@density@factor{#1}}
% \begin{dmath}[indentstep={1em}]
\define@key{breqn}{indentstep}{\eqindentstep#1\relax}
% \begin{dmath}[compact]
\define@key{breqn}{compact}[-99]{\prerelpenalty=#1\relax}
% \begin{dmath}[layout={S}]%
\define@key{breqn}{layout}[?]{%
  \edef\eq@layout{\@car#1?\@nil}%
}
% \begin{dmath}[spread={1pt}]
\define@key{breqn}{spread}{%
  \advance\eqlinespacing#1%
  \advance\eqlineskip#1\eqlineskiplimit\eqlineskip
}
\define@key{breqn}{sidespace}{%
  \dimen@#1\relax % error checking
  \def\given@sidespace{#1}%
}
% \begin{dmath}[style={\small}]
\define@key{breqn}{style}{\eqstyle\@xp{\the\eqstyle #1}}
% \begin{dmath}[frame]
\define@key{breqn}{frame}[\fboxrule]{\def\eq@frame{T}%
  \dim@a#1\relax\edef\eq@framewd{\the\dim@a}%
  \freeze@glue\eqlinespacing \freeze@glue\eqlineskip
}
\define@key{breqn}{fullframe}[]{\def\eq@frame{U}%
  \freeze@glue\eqlinespacing \freeze@glue\eqlineskip
}
\def\eq@frame{F} % no frame

\def\eq@framewd{\fboxrule}
\define@key{breqn}{framesep}[\fboxsep]{%
  \if\eq@frame F\def\eq@frame{T}\fi
  \dim@a#1\relax \edef\eq@framesep{\the\dim@a}%
  \freeze@glue\eqlinespacing \freeze@glue\eqlineskip
}
\def\eq@framesep{\fboxsep}
% \begin{dmath}[background={red}]
\define@key{breqn}{background}{\def\eq@background{#1}%
  \freeze@glue\eqlinespacing \freeze@glue\eqlineskip
}
%
% \begin{dmath}[color={purple}]
\define@key{breqn}{color}{\def\eq@foreground{#1}}
% \begin{dmath}[center]
\define@key{breqn}{center}[]{\let\eq@centerlines\@True}
% \begin{dmath}[nocenter]
\define@key{breqn}{nocenter}[]{\let\eq@centerlines\@False}
\let\eq@centerlines\@False
% \begin{dgroup}[noalign]
\define@key{breqn}{noalign}[]{\let\grp@aligned\@False}
\let\grp@aligned\@True % default
% \begin{dgroup}[breakdepth={2}]
\define@key{breqn}{breakdepth}{\eqbreakdepth#1\relax}
% \begin{darray}[cols={lcrlcr}]
\define@key{breqn}{cols}{\global\let\@preamble\@empty
  \darray@mkpream#1\@percentchar
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% FORMAT STATUS%
% \def\eq@frame{T}%
% CLM works tolerably
%  \def\eqindent{C}\def\eqnumside{L}\def\eqnumplace{M}
% CLT works tolerably
%  \def\eqindent{C}\def\eqnumside{L}\def\eqnumplace{T}
% ILM
%  \def\eqindent{I}\def\eqnumside{L}\def\eqnumplace{M}\mathindent40\p@
% ILT
%  \def\eqindent{I}\def\eqnumside{L}\def\eqnumplace{T}\mathindent40\p@
% Indended w/left number
%    work ok if mathindent is larger than number width,
%    but then equations must fit into smaller space.
%    Is shiftnumber allowed to put eqn at left, instead of indent?
% CRM
%  \def\eqindent{C}\def\eqnumside{R}\def\eqnumplace{M}
% CRB
%  \def\eqindent{C}\def\eqnumside{R}\def\eqnumplace{B}
% IRM
%  \def\eqindent{I}\def\eqnumside{R}\def\eqnumplace{M}\mathindent10\p@
% IRB
%  \def\eqindent{I}\def\eqnumside{R}\def\eqnumplace{B}\mathindent10\p@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The main environments.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%BRM: The following incorporates several changes:
%%  1) modifications supplied by MJD to fix the eaten \paragraph problem.
%%  2) Added \display@setup here, rather than globally.
\newenvironment{dmath}{%
 \let\eq@hasNumber\@True \@optarg\@dmath{}}{}

%BRM DEBUG
\errorcontextlines2000\relax

\def\@dmath[#1]{%
  \debugmsg{=== DMATH ==================================================}%
  \everydisplay\expandafter{\the\everydisplay \display@setup}%
  \if@noskipsec \leavevmode \fi
  \if@inlabel \leavevmode \global\@inlabelfalse \fi
  \if\eq@group\else\eq@prelim\fi
  \setkeys{breqn}{#1}%
  \the\eqstyle
  \eq@setnumber
  \begingroup
  \eq@setup@a
  \eq@startup
}

\def\enddmath#1{\check@punct@or@qed}
\def\end@dmath{%
  \gdef\EQ@setwdL{}% Occasionally undefined ???
  \eq@capture
  \endgroup
  \EQ@setwdL
  \eq@measure
  \if\eq@group \grp@push \else \eq@finish\fi
}
\newenvironment{dmath*}{%
  \let\eq@hasNumber\@False \@optarg\@dmath{}%
}{}
\@namedef{end@dmath*}{\end@dmath}
\@namedef{enddmath*}#1{\check@punct@or@qed}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\def\eq@prelim{%
  \if@inlabel \indent \par \fi
  \if@nobreak \global\@nobreakfalse \predisplaypenalty\@M \fi
  \everypar\@emptytoks
  \noindent
  \eq@nulldisplay
  \par %% \eq@saveparinfo %% needs work
  \let\intertext\breqn@intertext
}
\def\breqn@parshape@warning{%
  \PackageWarning{breqn}{%
    Complex paragraph shape cannot be followed by this equation}%
}
\let\eq@prevshape\@empty
\def\eq@saveparinfo{%
  \count@\prevgraf \advance\count@-\thr@@ % for the null display
  \edef\eq@prevshape{\prevgraf\the\count@\space}%
  \ifcase\parshape
    % case 0: no action required
  \or \edef\eq@prevshape{\eq@prevshape
        \parshape\@ne\displayindent\displaywidth\relax
      }%
  \else
    \breqn@parshape@warning
  \fi
}
\def\eq@setnumber{%
  \eq@wdNum\z@
  \if\eq@hasNumber
    \ifx\eq@number\@empty
      \stepcounter{equation}\let\eq@number\theequation
    \fi
%  \fi
 % This sets up numbox, etc, even if unnumbered?????
  \ifx\eq@number\@empty
  \else
    \debugmsg{Number \eq@number}%
    \set@label{equation}\eq@number
    \global\sbox\EQ@numbox{%
      \next@label \global\let\next@label\@empty
      \eqnumcolor\eqnumsize\eqnumfont{\eqnumform{\eq@number}}%
    }%
    \global\eq@wdNum\wd\EQ@numbox\global\advance\eq@wdNum\eqnumsep
%    \let\eq@hasNumber\@True % locally true
  \fi
\fi
}
% Invoke the equation formatter for the requested centering/indentation
% having worked out the best parshape.
% BRM: This portion is extensively refactored to get common operations
% together (so corrections get consistently applied).
\def\eq@finish{%
  \begingroup
    \debugmsg{Formatting equation}%
    \debug@showmeasurements
    \if F\eq@frame\else
      \freeze@glue\eqlinespacing \freeze@glue\eqlineskip
    \fi
%    \eq@topspace{\vskip\parskip}% Set top spacing
    \csname eq@\eqindent @setsides\endcsname % Compute \leftskip,\rightskip
    \adjust@parshape\eq@parshape% Final adjustment of parshape for left|right skips
    \eq@topspace{\vskip\parskip}% Set top spacing
    \debug@showformat
    % Now, invoke the appropriate typesetter according to number placement
    \if\eq@hasNumber
      \if\eq@shiftnumber
        \csname eq@typeset@\eqnumside Shifted\endcsname
      \else
        \csname eq@typeset@\eqnumside\eqnumplace\endcsname
      \fi
    \else
      \eq@typeset@Unnumbered
    \fi
  \endgroup
  \eq@botspace
}
\def\peek@branch#1#2{%
  \let\peek@b#1\let\peek@space#2\futurelet\@let@token\peek@a
}
\def\peek@skipping@spaces#1{\peek@branch#1\peek@skip@space}
\def\peek@a{%
  \ifx\@let@token\@sptoken \expandafter\peek@space
  \else \expandafter\peek@b\fi
}
\lowercase{\def\peek@skip@space} {\futurelet\@let@token\peek@a}%
\def\check@punct{\futurelet\@let@token\check@punct@a}
\def\check@punct@a{%
  \edef\@tempa{%
    \ifx\@let@token\@sptoken\@nx\finish@end
    \else\ifx\@let@token ,\@nx\check@qed
    \else\ifx\@let@token .\@nx\check@qed
    \else\check@punct@b % check the less common possibilities
    \fi\fi\fi
  }%
  \@tempa
}
\begingroup
\toks@a{%
  \ifx\@let@token ;\@nx\check@qed
  \else\ifx\@let@token ?\@nx\check@qed
  \else\ifx\@let@token !\@nx\check@qed
}
\toks@c{\fi\fi\fi}% matching with \toks@a
\catcode`\.=\active \catcode`\,=\active \catcode`\;=\active
\catcode`\?=\active \catcode`\!=\active
\toks@b{%
  \else\ifx\@let@token ,\@nx\check@qed
  \else\ifx\@let@token .\@nx\check@qed
  \else\ifx\@let@token ;\@nx\check@qed
  \else\ifx\@let@token ?\@nx\check@qed
  \else\ifx\@let@token !\@nx\check@qed
  \fi\fi\fi\fi\fi
}
\xdef\check@punct@b{%
  \the\toks@a\the\toks@b\the\toks@c
}
\endgroup
\let\found@punct\@empty
\def\check@qed#1{%
  \gdef\found@punct{#1}%
  \peek@skipping@spaces\check@qed@a
}
\def\check@qed@a{%
  \ifx\end\@let@token \@xp\check@qed@b
  \else \@xp\finish@end
  \fi
}
\def\check@qed@b#1#2{%
  \@ifundefined{#2qed}{}{%
    \toks@\@xp{\found@punct\csname#2qed\endcsname}%
    \xdef\found@punct{\the\toks@}%
  }%
  \finish@end
  \end{#2}%
}
\def\@tempa#1\endcsname#2\@nil{\def\latex@end##1{#2}}
\expandafter\@tempa\end{#1}\@nil
\def\end#1{\csname end#1\endcsname \latex@end{#1}}%
\def\check@punct@or@qed#1{%
  \xdef\found@punct{\@empty}% BRM: punctuation was being remembered past this eqn.
  \def\finish@end{\csname end@#1\endcsname\latex@end{#1}}%
  \check@punct
}
\newcommand\eqpunct[1]{\thinspace#1}
\providecommand\set@label[2]{\protected@edef\@currentlabel{#2}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BRM: Hmm; we need to do *@setspace BEFORE this for small skips to work!
\def\eq@topspace#1{%
  \begingroup
    \global\let\EQ@shortskips\@False
    \if\@And{\eq@group}{\@Not\GRP@top}%
      \parskip\intereqskip \penalty\intereqpenalty
    \else
      \eq@check@shortskip
      \if\EQ@shortskips
        \parskip\abovedisplayshortskip
        \aftergroup\belowdisplayskip\aftergroup\belowdisplayshortskip
        % BRM: Not exactly TeX's approach, but seems right...
        \ifdim\predisplaysize>\z@\nointerlineskip\fi
      \else
        \parskip\abovedisplayskip
      \fi
    \fi
    \if F\eq@frame
    \else
      \advance\parskip\eq@framesep \advance\parskip\eq@framewd\relax
    \fi
\debugmsg{Topspace: \theb@@le\EQ@shortskips, \parskip=\the\parskip, \predisplaysize=\the\predisplaysize}%
    #1%
  \endgroup
}
\def\eq@check@shortskip{%
  \global\let\EQ@shortskips\@False
  \dim@a\abovedisplayskip\advance\dim@a\ht\EQ@numbox
  \advance\leftskip-2em % standard TeX value
  \ifdim\leftskip<\predisplaysize
  \else\if R\eqnumside  \global\let\EQ@shortskips\@True
  \else\if\eq@shiftnumber
  \else\if T\eqnumplace
    \ifdim\dim@a<\eq@firstht
      \global\let\EQ@shortskips\@True
    \fi
  \else
    \dim@b\eq@vspan\divide\dim@b 2\relax
    \ifdim\dim@a<\dim@b
      \global\let\EQ@shortskips\@True
    \fi
  \fi\fi\fi\fi
}
\def\eq@botspace{%
  \penalty\postdisplaypenalty
  \if F\eq@frame
  \else
    \advance\belowdisplayskip\eq@framesep
    \advance\belowdisplayskip\eq@framewd\relax
  \fi
  \vskip\belowdisplayskip
  \@endpetrue % kill parindent if current paragraph continues
  \global\@ignoretrue % ignore following spaces
  \eq@resume@parshape
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\def\eq@resume@parshape{}
\def\eq@startup{%
  \global\let\EQ@hasLHS\@False
  \setbox\z@\vbox\bgroup
    \noindent \@@math \displaystyle
    \penalty-\@Mi
}
\def\eq@setup@a{%
  \everymath\everydisplay
  %\let\@newline\eq@newline % future possibility?
  \let\\\eq@newline
  \let\insert\eq@insert \let\mark\eq@mark \let\vadjust\eq@vadjust
  \hsize\maxdimen \pretolerance\@M
  \linepenalty\@m
  \rightskip\z@\@plus\@M\p@ \leftskip\z@skip \parfillskip\z@skip
  \clubpenalty\@ne \widowpenalty\z@ \interlinepenalty\z@
  \global\let\EQ@prebin@space\relax
  \binoppenalty\@M \relpenalty\@M
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Capturing the equation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BRM: There's a problem here (or with \ss@scan).  If the LHS has
% \left \right pairs, \ss@scan gets involved.  It seems to produce
% a separate box marked w/\penalty 3.  But it appears that \eq@repack
% is only expecting a single box for the LHS; when it measures that
% box it's missing the (typically larger) bracketted section,
% so the LHS is measured => 0pt (or very small).
%  I'm not entirely clear what Michael had in mind for this case;
% whether it's an oversight, or whether I've introduced some other bug.
% At any rate, my solution is to measure the RHS (accumulated in \EQ@box),
% at the time of the relation, and subtract that from the total size.
\newdimen\eq@wdR\eq@wdR\z@%BRM
\def\eq@capture{%
  \ifnum\lastpenalty>-\@M \penalty-\@Mi \fi
  \keep@glue\@@endmath
  \eq@addpunct
  \@@par
  \eq@wdL\z@
  \setbox\tw@\lastbox
  \global\setbox\EQ@box\hbox{\unhbox\tw@\unskip\unskip\unpenalty}%
  \unskip\unpenalty
  \global\setbox\EQ@copy\copy\EQ@box
%%  \global\setbox\EQ@vimcopy\copy\EQ@vimbox
  \clubpenalty\z@
%\batchmode\showboxbreadth\maxdimen\showboxdepth99\showlists\errorstopmode
  \eq@wdR\z@%BRM: eq@wdL patch
  \eq@repack % recursive
  \setbox\tw@\lastbox
  \global\setbox\EQ@box\hbox{\unhcopy\tw@\unskip\unpenalty \unhbox\EQ@box}%
  \global\setbox\EQ@copy\hbox{\unhbox\tw@\unskip\unpenalty \unhbox\EQ@copy}%
%\batchmode\showbox\EQ@copy \showthe\eq@wdL\errorstopmode
  \ifdim\eq@wdR>\z@% BRM:  eq@wdL patch
    \dim@a\wd\EQ@box\advance\dim@a-\eq@wdR
    % Apparently missing a \thickmuskip = 5mu = 5/18em=0.27777777777.. ?
    \advance\dim@a0.2777777777777em\relax% FUDGE??!?!?!
    \ifdim\dim@a>\eq@wdL
      \debugmsg{Correcting LHS from \the\eq@wdL\space to \the\dim@a = \the\wd\EQ@box - \the\eq@wdR}%
      \eq@wdL\dim@a
      \xdef\EQ@setwdL{\eq@wdL\the\eq@wdL\relax}%
    \fi
  \fi
  \debugmsg{Capture: total length=\the\wd\EQ@box
           ^^J||===== has LHS=\theb@@le\EQ@hasLHS, \eq@wdL=\the\eq@wdL, \eq@wdR=\the\eq@wdR,
           ^^J||===== \eq@wdCond=\the\eq@wdCond}%
  \egroup % end vbox started earlier
%\debugwr{EQ@box}\debug@box\EQ@box
%\debugwr{EQ@copy}\debug@box\EQ@copy
}
\def\eq@addpunct{%
  \ifx\found@punct\@empty
  \else \eqpunct{\found@punct}%
  \fi
  % BRM: Added; the punctuation kept  getting carried to following environs
  \xdef\found@punct{\@empty}%
  \EQ@afterspace
}
\global\let\EQ@afterspace\@empty
% TeX Note: this scans BACKWARDS from the end of the math.
\def\eq@repack{%
  \ifcase\lastpenalty
     % case 0: normal case
    \setbox\tw@\lastbox
    \eq@repacka\EQ@copy \eq@repacka\EQ@box
    \unskip
  \or % case 1: finished recursing
    \unpenalty
    \setbox\tw@\lastbox
    \eq@repacka\EQ@copy \eq@repacka\EQ@box
    \@xp\@gobble
  \or % case 2: save box width = LHS width
    \unpenalty
    \setbox\tw@\lastbox
    \setbox\z@\copy\tw@ \setbox\z@\hbox{\unhbox\z@\unskip\unpenalty}%
    \advance\eq@wdL\wd\z@
    \eq@wdR\wd\EQ@box% BRM:  eq@wdL patch
    \xdef\EQ@setwdL{\eq@wdL\the\eq@wdL\relax}%
    \global\setbox\EQ@copy\hbox{%
      \hbox{\unhcopy\tw@\unskip\unpenalty\unskip}%
      \box\EQ@copy
    }%
    \global\setbox\EQ@box\hbox{%
      \hbox{\unhbox\tw@\unskip\unpenalty\unskip}%
      \box\EQ@box
    }%
    \unskip
  \or % case 3: unpack left-right box
    \unpenalty
    \eq@lrunpack
  \else
    \breqn@repack@err
  \fi
  \eq@repack % RECURSE
}
\def\breqn@repack@err{%
  \PackageError{breqn}{eq@repack penalty neq 0,1,2,3}\relax
}
\def\eq@repacka#1{%
  \global\setbox#1\hbox{\unhcopy\tw@ \unskip
    \count@-\lastpenalty
    \ifnum\count@<\@M \else \advance\count@-\@M \fi
    \unpenalty
    \ifx\EQ@copy#1\ifnum\count@>\thr@@ \count@\@ne\fi\fi
    \ifcase\count@
        % case 0, normal line break
      \penalty-\@M % put back the linebreak penalty
    \or % case 1, do nothing (end of equation)
      \relax
    \or % case 2, no-op (obsolete case)
    \or % case 3, transfer vspace and/or penalty
      \ifx#1\EQ@box \eq@revspace \else \eq@revspaceb \fi
    \or % case 4, put back an insert
      \eq@reinsert
    \or % case 5, put back a mark
      \eq@remark
    \or % case 6, put back a vadjust
      \eq@readjust
    \else % some other break penalty
      \penalty-\count@
    \fi
    \unhbox#1}%
}
\def\eq@nulldisplay{%
  \begingroup \frozen@everydisplay\@emptytoks
  \@@display
  \predisplaypenalty\@M \postdisplaypenalty\@M
  \abovedisplayskip\z@skip \abovedisplayshortskip\z@skip
  \belowdisplayskip\z@skip \belowdisplayshortskip\z@skip
  \xdef\EQ@displayinfo{%
    \prevgraf\the\prevgraf \predisplaysize\the\predisplaysize
    \displaywidth\the\displaywidth \displayindent\the\displayindent
    \listwidth\the\linewidth
    \ifdim\displayindent>\z@
      \advance\listwidth\the\leftmargin
      \advance\listwidth\the\rightmargin
    \fi
    \relax}%
  \halign{##\cr}%
  \@@enddisplay
  \par
  \endgroup
  \EQ@displayinfo
}
\def\eq@newline{%
  \@ifstar{\eq@newlinea\@M}{\eq@newlinea\eqinterlinepenalty}}
\def\eq@newlinea#1{%
  \@ifnext[{\eq@newlineb{#1}}{\eq@newlineb{#1}[\maxdimen]}}
\def\eq@newlineb#1[#2]{\penalty-\@M}
\def\eq@revspace{%
  \global\setbox\EQ@vimbox\vbox{\unvbox\EQ@vimbox
    \unpenalty
    \global\setbox\@ne\lastbox}%
  \@@vadjust{\unvbox\@ne}%
  \penalty-\@M
}
\def\eq@revspaceb{%
  \global\setbox\EQ@vimcopy\vbox{\unvbox\EQ@vimcopy
    \unpenalty
    \global\setbox\@ne\lastbox}%
  \@@vadjust{\unvbox\@ne}%
  \penalty-\@M
}
\def\eq@break#1{\penalty-1000#1 \keep@glue}
\let\@parshape\@empty
\def\eq@measure{%
  \ifdim\eq@indentstep=\maxdimen \eq@indentstep\eqindentstep \fi
  \ifdim\eq@linewidth=\z@ \else \edef\eq@linewidths{{\the\eq@linewidth}}\fi
  \begingroup \eq@params
  \leftskip\z@skip \rightskip\z@\@plus\columnwidth\@minus\hfuzz
%  \eqinfo
  \global\EQ@continue{\eq@trial}%
  \eq@trial % uses \eq@linewidths
  \eq@failout % will be a no-op if the trial succeeded
  \endgroup
  \EQ@trial
}
\def\debug@showmeasurements{%
  \debugmsg{=> \number\eq@lines\space lines}%
  \debug
  \def\@elt##1^^J##2{^^J||===== \space\space##1/##2}%
  \let\@endelt\@empty
  \debugmsg{=> trial info:\eq@measurements}%
  \debugmsg{=> bounding box: \the\eq@wdT x\the\eq@vspan, badness=\the\eq@badness}%
  \let\@elt\relax \let\@endelt\relax
  \gubed
}
\def\debug@showmeasurements{%
  \begingroup
  \def\@elt##1^^J##2{^^J||=====   ##1/##2}%
  \let\@endelt\@empty
  \debugmsg{===> Measurements: \number\eq@lines\space lines
           \eq@measurements
           ^^J||===== bounding box: \the\eq@wdT x\the\eq@vspan, badness=\the\eq@badness
           ^^J||===== \leftskip=\the\leftskip, \rightskip=\the\rightskip}%
 \endgroup
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Layout Trials Driver
% Basically, trying different sequences of parshapes.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\let\EQ@trial\@empty
\newtoks\EQ@continue
\let\EQ@widths\@empty
\let\EQ@fallback\@empty
%========================================
% BRM: Odd; I don't think I've seen this use anything but \displaywidth...
\def\eq@linewidths{\displaywidth\linewidth\columnwidth}
\def\eq@trial{%
  \ifx\@empty\eq@linewidths
    \global\EQ@continue{}%
  \else
    \iffalse{\fi \@xp\eq@trial@a \eq@linewidths}%
  \fi
  \the\EQ@continue
}
\def\eq@trial@a#1{%
  \dim@c#1\relax
  \if T\eq@frame \eq@frame@adjust\dim@c \fi
  \ifdim\dim@c>\eq@linewidth
    \eq@linewidth\dim@c 
    \debugmsg{Choose Shape for width(#1)=\the\eq@linewidth}%
    \let\eq@trial@b\eq@trial@d
    \csname eq@try@layout@\eq@layout\endcsname
  \else
    \debugmsg{Next width (#1) is shorter; skip it}%
  \fi
  \edef\eq@linewidths{\iffalse}\fi
}
\def\eq@frame@adjust#1{%
  \dim@a\eq@framewd \advance\dim@a\eq@framesep
  \advance#1-2\dim@a
}
%========================================
% Note curious control structure.
% Try to understand interaction of \EQ@fallback, \EQ@continue, \eq@failout
\def\eq@trial@succeed{%
  \aftergroup\@gobbletwo % cancel the \EQ@fallback code; see \eq@trial@c (?)
  \global\EQ@continue{\eq@trial@done}%
}
\def\eq@trial@done{%
  \debugmsg{End trial: Success!}%
  \let\eq@failout\relax
}
\def\eq@trial@init{%
   \global\let\EQ@fallback\eq@nextlayout}
\def\eq@nextlayout#1{% 
  \endgroup
  \debugmsg{Nope ... that ain't gonna work.}%
  \begingroup #1%
}
\def\eq@failout{%
  \debugmsg{End trial: failout}%
  \global\let\EQ@trial\EQ@last@trial
}
%========================================
\def\eq@trial@save#1{%
%  \debug \def\@elt##1^^J##2{^^J||===== \space\space##1/##2}\let\@endelt\@empty\debugmsg{=> trial info:\eq@measurements}%
%         \debugmsg{=> bounding box: \the\eq@wdT x\the\eq@vspan, badness=\the\eq@badness^^J}%
%         \let\@elt\relax \let\@endelt\relax
%  \gubed
  \xdef#1{%
    \eq@linewidth\the\eq@linewidth
    % save info about the fit
    \eq@lines\the\eq@lines \eq@badness\the\eq@badness \def\@nx\eq@badline{\eq@badline}%
    % save size info
    \eq@wdT\the\eq@wdT \eq@wdMin\the\eq@wdMin
    \eq@vspan\the\eq@vspan \eq@dp\the\eq@dp \eq@firstht\the\eq@firstht
    % save info about the LHS
    \eq@wdL\the\eq@wdL \def\@nx\EQ@hasLHS{\EQ@hasLHS}%
    % save info about the numbering
    \def\@nx\eq@hasNumber{\eq@hasNumber}%
    % save info about the chosen layout
    \def\@nx\eq@layout{\eq@layout}%
    \def\@nx\eq@parshape{\@parshape}%
    \def\@nx\eq@measurements{\eq@measurements}%
    \def\@nx\adjust@rel@penalty{\adjust@rel@penalty}%
    \def\@nx\eq@shiftnumber{\eq@shiftnumber}%
    \def\@nx\eq@isIntertext{\@False}%
  }%
}
%========================================
\def\eq@trial@b{\eq@trial@c}
\def\eq@trial@d#1#2{\eq@trial@c{#1}{}}

\def\eq@trial@c#1#2{%
  \debugmsg{Trying layout "#1" with^^J||===== parshape\space\@xp\@gobble\@parshape}%
  \begingroup
  \eq@trial@init
  \def\eq@layout{#1}%
  \setbox\z@\vbox{%
    \hfuzz\maxdimen
    \eq@trial@p % run the given parshape
    \if\@Not{\eq@badline}%
      \eq@trial@save\EQ@trial
      % This is an awkward place for this:
      % It only allows trying to fit the number w/the SAME layout shape!
      \if\eq@hasNumber\eq@retry@with@number\fi
      \if L\eq@layout \eq@check@density
      \else
        \if\@Not{\eq@badline}%
           \eq@trial@succeed
        \fi
      \fi
    \else
      \eq@trial@save\EQ@last@trial
    \fi
  }%
  \EQ@fallback{#2}%
  \endgroup
}
\def\eq@check@density{%
  \debugmsg{Checking density for layout L}%
  \if\@Or{\@Not\EQ@hasLHS}{\eq@shortLHS}%
    \debugmsg{Density check: No LHS, or is short; OK}%
    \eq@trial@succeed
  \else\if\eq@dense@enough
    \eq@trial@succeed
  \fi\fi
}
\def\eq@shortLHS{\ifdim\eq@wdL>.44\eq@wdT 1\else 0\fi 0}
%\def\eq@shortLHS{\@False}
%========================================
% Run a trial with the current \@parshape and measure it.
\def\eq@trial@p{%
  \@parshape %
  \eq@dump@box\unhcopy\EQ@copy
  {\@@par}% leave \parshape readable
  \eq@lines\prevgraf
  \eq@fix@lastline
  \let\eq@badline\@False
  \if i\eq@layout \ifnum\eq@lines>\@ne \let\eq@badline\@True \fi\fi
  \eq@curline\eq@lines % loop counter for eq@measure@lines
  \let\eq@measurements\@empty
  \eq@ml@record@indents
  \eq@measure@lines
  \eq@recalc
  \debug@showmeasurements
}
\let\adjust@rel@penalty\@empty
%========================================
\def\eq@fix@lastline{%
  \setbox\tw@\lastbox \dim@b\wd\tw@
  \eq@dp\dp\tw@
  \nointerlineskip\hbox to\dim@b{\unhbox\tw@
    \skip@c\lastskip \unskip\unskip\hskip\skip@c
  }%
}
%========================================
\def\eq@recalc{%
  \eq@wdT\z@ \eq@wdMin\maxdimen \eq@vspan\z@skip \eq@badness\z@
  \let\@elt\eq@recalc@a \eq@measurements \let\@elt\relax
}
\def\eq@recalc@a#1x#2+#3\@endelt{%
  \eq@firstht#2\relax
  \let\@elt\eq@recalc@b
  \@elt#1x#2+#3\@endelt
}
\def\eq@recalc@b#1^^J#2,#3x#4+#5@#6\@endelt{%
  \dim@a#2\advance\dim@a#3\relax
  \ifdim\dim@a>\eq@wdT \eq@wdT\dim@a \fi
  \ifdim\dim@a<\eq@wdMin \eq@wdMin\dim@a \fi
  \eq@dp#5\relax
  \advance\eq@vspan#1\advance\eq@vspan#4\advance\eq@vspan#5\relax
  \ifnum#6>\eq@badness \eq@badness#6\relax\fi
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Layout Definitions.
% Based on initial equation measurements, we can choose a sequence of
% candidate parshapes that the equation might fit into.
% We accept the first shape that `works', else fall to next one.
% [The sequence is hardcoded in the \eq@try@layout@<shape>
%  Would it be useful be more flexible? (eg. try layouts LDA, in order...)]
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\def\eq@layout{?}

% Default layout:
%  Try Single line layout first, else try Multiline layouts
\@namedef{eq@try@layout@?}{%
  \let\eq@trial@b\eq@trial@c
  \edef\@parshape{\parshape 1 0pt \the\eq@linewidth\relax}%
%  \eq@trial@b{i}{\eq@try@layout@multi}%
  \dim@a\wd\EQ@copy\advance\dim@a-2em\relax% Fudge; can't shrink more than this?
  % if we're in a numbered group, try hard to fit within the numbers
  \dim@b\eq@linewidth
  \if\eq@shiftnumber\else\if\eq@group
    \if\eq@hasNumber\advance\dim@b-\wd\EQ@numbox\advance\dim@b-\eqnumsep
    \else\if\grp@hasNumber\advance\dim@b-\wd\GRP@numbox\advance\dim@b-\eqnumsep
  \fi\fi\fi\fi
  \ifdim\dim@a<\dim@b% Do we even have a chance of fitting to one line?
    \debugmsg{Choose Shape: (\the\wd\EQ@copy) may fit in \the\dim@b}%
%BRM%
    % assuming it might fit, don't push too hard
    \dim@b\columnwidth\advance\dim@b-\dim@a\advance\dim@b\eq@wdCond
    \rightskip\z@\@plus\dim@b\@minus\hfuzz
%
    \eq@trial@b{i}{\eq@try@layout@multi}%
  \else
    \debugmsg{Choose Shape: Too long (\the\wd\EQ@copy) for one line (free width=\the\dim@b)}%
   \eq@try@layout@multi
  \fi
}

% Layout Multiline layout:
%  If no LHS, try Stepped(S) layout
%  Else try Stepped(S), Ladder(L), Drop-ladder(D) or Stepladder(l), depending on LHS length.
\def\eq@try@layout@multi{%
  \if\EQ@hasLHS
    \ifdim\eq@wdL>\eq@linewidth
       \debugmsg{Choose Shape: LHS \the\eq@wdL > linewidth}%
       \dim@a\wd\EQ@copy \advance\dim@a-\eq@wdL
       \ifdim\dim@a<.25\eq@linewidth \eq@try@layout@S
       \else \eq@try@layout@l
       \fi
    % BRM: Originally .7: Extreme for L since rhs has to wrap within the remaining 30+%!
    \else\ifdim\eq@wdL>.50\eq@linewidth
      \debugmsg{Choose Shape: LHS (\the\eq@wdL) > .50 linewidth (linewidth=\the\eq@linewidth)}%
      \eq@try@layout@D
    \else
      \debugmsg{Choose Shape: LHS (\the\eq@wdL) not extraordinarily wide}%
      \eq@try@layout@L
    \fi\fi
  \else
    \debugmsg{Choose Shape: No LHS here}%
    \eq@try@layout@S % (already checked case i)
  \fi
}
% Layout D=Drop-Ladder Layout, for wide LHS.
%   LOOOOOOOONG LHS
%    = RHS
%    = ...
% If fails, try Almost-Columnar layout
\def\eq@try@layout@D{%
  \dim@a\eq@linewidth \advance\dim@a-\eq@indentstep
  \edef\@parshape{\parshape 2
    0pt \the\eq@wdL\space \the\eq@indentstep\space \the\dim@a\relax
  }%
  \def\adjust@rel@penalty{\penalty-99 }%
  \eq@trial@b{D}{\eq@try@layout@A}%
}
% Layout L=Ladder layout
%  LHS = RHS
%      = RHS
%      ...
% If fails, try Drop-ladder layout.
% NOTE: This is great for some cases (multi relations?), but
% tends to break really badly when it fails....
\def\eq@try@layout@L{%
  \dim@b\eq@linewidth \advance\dim@b-\eq@wdL
  \edef\@parshape{\parshape 2 0pt \the\eq@linewidth\space
    \the\eq@wdL\space \the\dim@b\relax
  }%
  \eq@trial@b{L}{\eq@try@layout@D}%
}
% Layout S=Stepped layout, typically no LHS or very long, variations on
%  STUFF ....
%    + MORE STUFF ...
%      + MORE STUFF ...
% If fails, try Almost-Columnar layout
\def\eq@try@layout@S{%
  \dim@b\eq@linewidth \advance\dim@b-2\eqmargin% \advance\dim@b-1em%
  \int@a\wd\EQ@copy \divide\int@a\dim@b
  \advance\dim@b-\int@a\eq@indentstep\relax
  \if\eq@hasNumber
    \ifdim\dim@b>15em%
%      \advance\dim@b-\eqnumsep \advance\dim@b-\wd\EQ@numbox
      \advance\dim@b-\eq@wdNum
    \fi
  \fi
  \int@b\z@
  \def\@tempa{\dim}%
  \edef\@parshape{\parshape 2 0pt \the\dim@b\space
    \the\eqmargin\space\the\dim@b\relax}%
  \eq@trial@b{S}{\eq@try@layout@A}%
}
% Layout l = Stepladder
% Similar to Drop-Ladder, but LHS is long and needs to be broken up.
% If fails, try Almost-Columnar layout
\def\eq@try@layout@l{%
  \dim@a\eq@linewidth \advance\dim@a-\eq@indentstep
  \int@a\eq@wdL \divide\int@a\dim@a
  \advance\int@a\tw@
  \edef\@parshape{\parshape \number\int@a\space
    0pt \the\eq@linewidth
  }%
  \advance\int@a-\tw@
  \dim@b=2\eq@indentstep
  \dim@c\eq@linewidth \advance\dim@c-\dim@b
  \edef\@parshape{\@parshape
    \replicate{\int@a}{\space\the\eq@indentstep\space\the\dim@a}%
    \space\the\dim@b\space\the\dim@c\relax
  }%
  \eq@trial@b{l}{\eq@try@layout@A}%
}
% Layout A = Almost-Columnar layout.
% Pretty much straight full width, more of a last-resort.
% If fails, give up.
\def\eq@try@layout@A{%
  \edef\@parshape{\parshape 1 0pt \the\eq@linewidth\relax}%
  \if\EQ@hasLHS \def\adjust@rel@penalty{\penalty-99 }\fi
  \eq@trial@b{A}{}%
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Number placement adjustments
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\let\eq@shiftnumber\@False
\def\eq@retry@with@number{%
 \if\eq@shiftnumber
   \debugmsg{Place number: Shifted number requested}%
 \else
    % Condition and right numbers? We're just going to have to shift.
    \ifdim\eq@wdCond>\z@\if R\eqnumside
      \debugmsg{Place number: Condition w/Right number => Shift number}%
      \let\eq@shiftnumber\@True
    \fi\fi
    % Compute free space.
%    \dim@b\eqnumsep\advance\dim@b\wd\EQ@numbox
    \dim@b\eq@wdNum
    \if L\eqnumside
      \ifdim\@totalleftmargin>\dim@b\dim@b\@totalleftmargin\fi
    \else
      \advance\dim@b\@totalleftmargin
    \fi
    \dim@a\eq@linewidth\advance\dim@a-\dim@b%\advance\dim@a1em\relax% Allowance for shrink?
    % Set up test against 1-line case only if not in a group
    \int@a\@ne\if\eq@group\int@a\maxint\fi
    % Now check for cases.
    \if\eq@shiftnumber               % Already know we need to shift
    \else\ifdim\eq@wdT<\dim@a % Fits!
      % left & right skips will be done later, and parshape adjusted if needed.
      \debugmsg{Place number: eqn and number fit together}%
%    \else\ifnum\eq@lines=\int@a %  Shift, if single line, unless inside a dgroup.
      % NOTE: this is too strong for dgroup!
%      \debugmsg{Place number: single line too long with number => Shift number \the\int@a}%
%      \let\eq@shiftnumber\@True
    \else
       % Retry: use leftskip for space for number(for now; whether right/left) & adjust parshape
%      \leftskip\wd\EQ@numbox\advance\leftskip\eqnumsep
      \leftskip\eq@wdNum
      \rightskip\z@\@plus\dim@a
      \adjust@parshape\@parshape
      \debugmsg{Place number: Try with \leftskip=\the\leftskip, \rightskip=\the\rightskip,
                ^^J||===== parshape\space\@xp\@gobble\@parshape}%
      \nointerlineskip
      \edef\eq@prev@lines{\the\eq@lines}%
      \edef\eq@prev@badness{\the\eq@badness}% BRM
      \eq@trial@p
      \int@a\eq@prev@badness\relax\advance\int@a 50\relax%?
      \int@b\eq@prev@lines  \if\eq@group\advance\int@b\@ne\fi% Allow 1 extra line in group
      \ifnum\eq@lines>\int@b % \eq@prev@lines
        \debugmsg{Adjustment causes more breaks => Shift number}%
        \let\eq@shiftnumber\@True
      \else\if\eq@badline
        \debugmsg{Adjustment causes bad lines (\the\eq@badness) => Shift}%
        \let\eq@shiftnumber\@True
      \else\ifnum\eq@badness>\int@a % BRM: New case
        \debugmsg{Adjustment is badder than previous (\the\eq@badness >> \eq@prev@badness) => Shift}%
        \let\eq@shiftnumber\@True
      \else
        \debugmsg{Adjustment succeeded}%
      \fi\fi%\fi
   \fi\fi\fi
   % If we got shifted, restore parshape, etc, 
   \if\eq@shiftnumber
     \EQ@trial% Restore parshape & other params,
     \leftskip\z@\let\eq@shiftnumber\@True % But set shift & leftskip
     \edef\@parshape{\eq@parshape}% And copy saved parshape back to `working copy' !?!?
   \fi
   \eq@trial@save\EQ@trial      % Either way, save the trial state.
 \fi
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Adjust a parshape variable for a given set of left|right skips.
% Note that the fixed part of the left|right skips effectively
% comes out of the parshape widths (NOT in addition to it).
% We also must trim the widths so that the sum of skips, indents 
% and widths add up to no more than the \eq@linewidth.
\def\adjust@parshape#1{%
  \@xp\adjust@parshape@a#1\relax
  \edef#1{\temp@a}%
}
\def\adjust@parshape@a#1 #2\relax{%
  \dim@a\leftskip\advance\dim@a\rightskip
  \edef\temp@a{#1}%
  \adjust@parshape@b#2 @ @ \relax
}
\def\adjust@parshape@b#1 #2 {%
  \ifx @#1\edef\temp@a{\temp@a\relax}%
    \@xp\@gobble
  \else
    \dim@b#1\relax
    \dim@c#2\relax
    \advance\dim@c\dim@a\advance\dim@c\dim@b
    \ifdim\dim@c>\eq@linewidth\dim@c\eq@linewidth\fi
     \advance\dim@c-\dim@b
    \edef\temp@a{\temp@a\space\the\dim@b\space\the\dim@c}%
  \fi
  \adjust@parshape@b
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\def\eq@ml@record@indents{%
  \int@a\z@
  \def\@tempa{%
    \advance\int@a\@ne
    \@xp\edef\csname eq@i\number\int@a\endcsname{\the\dim@a}%
    \ifnum\int@a<\int@b \afterassignment\@tempb \fi
    \dim@a
  }%
  \def\@tempb{\afterassignment\@tempa \dim@a}%
  \def\@tempc##1##2 {\int@b##2\afterassignment\@tempa\dim@a}%
  \@xp\@tempc\@parshape
}
\chardef\@endelt=`\?
\def\eq@measurements{%
  \@elt 4.5pt/5.0pt,66.0ptx6.8pt+2.4pt@27\@endelt
  ...
}
\def\eq@measure@lines{%
  \let\eq@ml@continue\eq@measure@lines
  \setbox\tw@\lastbox \dim@b\wd\tw@ % find target width of line
  \setbox\z@\hbox to\dim@b{\unhbox\tw@}% check for overfull
  \eq@badness\badness
  \ifnum\eq@badness<\inf@bad \else \let\eq@badline\@True \fi
  \eq@ml@a \eq@ml@continue
}
\def\eq@ml@a{%
  \setbox\tw@\hbox{\unhbox\z@ \unskip}% find natural width
  \debug\ifnum\eq@badness<\inf@bad\else\debugmsg{!?! Overfull: \the\wd\tw@ >\the\dim@b}\fi\gubed
  \ifdim\dim@b<\wd\tw@ \dim@a\dim@b  % shrunken line
  \else                \dim@a\wd\tw@ % OK to use natural width
  \fi
  \advance\dim@a-\leftskip% BRM: Deduct the skip if we're retrying w/number
  \skip@a\lastskip \unskip \unpenalty
  \ifdim\skip@a=\z@
    \let\eq@ml@continue\relax % end the recursion
  \else
    % Sum repeated vskips if present
    \def\@tempa{%
      \ifdim \lastskip=\z@
      \else \advance\skip@a\lastskip \unskip\unpenalty \@xp\@tempa
      \fi
    }%
  \fi
  \edef\eq@measurements{\@elt
    \the\skip@a\space^^J% extra space to facilitate extracting only the
                        % dimen part later
    \csname eq@i%
      \ifnum\eq@curline<\parshape \number\eq@curline
      \else\number\parshape
      \fi
    \endcsname,\the\dim@a x\the\ht\tw@+\the\dp\tw@ @\the\eq@badness\@endelt
    \eq@measurements
  }%
  \advance\eq@curline\m@ne
  \ifnum\eq@curline=\z@ \let\eq@ml@continue\relax\fi
}
\def\eq@ml@vspace{%
  \global\advance\eq@vspan\lastskip \unskip\unpenalty
  \ifdim\lastskip=\z@ \else \@xp\eq@ml@vspace \fi
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\def\eq@dense@enough{%
  \ifnum\eq@lines<\thr@@ 
    \debugmsg{Density check: less than 3 lines; OK}%
    \@True
  \else
    \ifdim\eq@wdL >.7\eq@wdT 
     \debugmsg{Density check: LHS too long; NOT OK}%
      \@False
    \else \@xp\@xp\@xp\eq@dense@enough@a
    \fi
  \fi
}
\def\true@false@true{\fi\fi\iftrue\iffalse\iftrue}
\def\false@false@false{\fi\fi\iffalse\iffalse\iffalse}
\def\false@true@false{\fi\fi\iffalse\iftrue\iffalse}
\def\eq@density@factor{.475}
\def\eq@dense@enough@a{%
  \@True \fi
  \ifnum\eq@lines>\sixt@@n
    \eq@dense@enough@b
  \else
    \dim@b\z@ \let\@elt\eq@delt \eq@measurements
    \dim@c\eq@density@factor\eq@wdT \multiply\dim@c\eq@lines
    \debugmsg{Density check: black \the\dim@b/\eq@density@factor total \the\dim@c}%
    \ifdim\dim@b>\dim@c \true@false@true \else \false@false@false \fi
  \fi
}
\def\eq@delt#1^^J#2,#3x#4+#5@#6\@endelt{\advance\dim@b#3\relax}%
\def\eq@dense@enough@b{%
  \int@b\eq@wdT \divide\int@b\p@
  \dim@b\eq@wdL \divide\dim@b\int@b
  \dim@c\eq@lines\p@ \multiply\dim@c\f@ur
  \int@b\eq@lines \multiply\int@b 9 \advance\int@b -10%
  \divide\dim@c\int@b
  \debugmsg{Density check: l/t \the\dim@b\space< \the\dim@c\space 4n/(9n-10)?}%
  \ifdim\dim@b<\dim@c \true@true@true \else \false@true@false \fi
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\let\eq@parshape\@empty
\def\eq@params{%
  \baselineskip\eqlinespacing
  \lineskip\eqlineskip \lineskiplimit\eqlineskiplimit
  \clubpenalty\@M \widowpenalty\@M \interlinepenalty\eqinterlinepenalty
  \linepenalty199 \exhyphenpenalty5000 % was 9999: make breaks at, eg. \* a bit easier.
  \ifdim\hfuzz<\p@ \hfuzz\p@ \fi
%\hfuzz=2pt
%  \ifdim\hfuzz<2pt\relax \hfuzz2pt \fi
  \parfillskip\z@skip
%  \hfuzz\z@
  \tolerance9999 \pretolerance\m@ne
}
\def\eq@dump@box#1#2{%
%\debug@box#1%
  \noindent #1#2\setbox\f@ur\lastbox \setbox\tw@\lastbox
  \if L\eq@layout \box\tw@ \else\unhbox\tw@\fi
  \adjust@rel@penalty \unhbox\f@ur
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Various typesetting bits, invoked from \eq@finish
% BRM: This has been extensively refactored from the original breqn,
% initially to get left|right skips and parshape used consistently,
% ultimately to get most things handled the same way, in the same order.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Given that left and right skips have been set,
% typeset the frame, number and equation with the
% given number side and placement
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\def\eq@typeset@Unnumbered{%
  \eq@typeset@frame
  \eq@typeset@equation
}
\def\eq@typeset@LM{%
  \dim@a\eq@vspan
  \advance\dim@a\ht\EQ@numbox\advance\dim@a-\dp\EQ@numbox
  \divide\dim@a\tw@
  \eq@typeset@leftnumber
  \eq@typeset@frame
  \eq@typeset@equation
}
% Typeset equation and left-top number (and shifted)
\def\eq@typeset@LT{%
  \dim@a\eq@firstht
  \eq@typeset@leftnumber
  \eq@typeset@frame
  \eq@typeset@equation
}
% Typeset equation and left shifted number
\def\eq@typeset@LShifted{%
  % place number
  \copy\EQ@numbox \penalty\@M
  \dim@a\eqlineskip
  \if F\eq@frame\else
   \advance\dim@a\eq@framesep\advance\dim@a\eq@framewd
  \fi
  \kern\dim@a
  \eq@typeset@frame
  \eq@typeset@equation
}
% Typeset equation and right middle number
\def\eq@typeset@RM{%
  \dim@a\eq@vspan
  \advance\dim@a\ht\EQ@numbox\advance\dim@a-\dp\EQ@numbox
  \divide\dim@a\tw@
  \eq@typeset@rightnumber
  \eq@typeset@frame
  \eq@typeset@equation
}
% Typeset equation and right bottom number
\def\eq@typeset@RB{%
  % NOTE: is \eq@dp useful here
  \dim@a\eq@vspan\advance\dim@a-\ht\EQ@numbox\advance\dim@a-\dp\EQ@numbox
  \eq@typeset@rightnumber
  \eq@typeset@frame
  \eq@typeset@equation
}
% Typeset equation and right shifted number
\def\eq@typeset@RShifted{%
  % place number
  \eq@typeset@frame
  \eq@typeset@equation
  \penalty\@M
  \dim@a\eqlineskip
  \if F\eq@frame\else
    \advance\dim@a\eq@framesep\advance\dim@a\eq@framewd
  \fi
  \parskip\dim@a
  \hbox to\hsize{\hfil\copy\EQ@numbox}\@@par%
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Debugging aid to show all relevant formatting info for a given eqn.
\def\debug@showformat{%
  \debugmsg{Formatting Layout:\eq@layout\space Center/indent: \eqindent\space Number placement \eqnumside\eqnumplace: 
           ^^J||===== \eq@linewidth=\the\eq@linewidth, \@totalleftmargin=\the\@totalleftmargin,
           ^^J||===== Centered Lines=\theb@@le\eq@centerlines, Shift Number=\theb@@le\eq@shiftnumber,
           ^^J||===== \eq@wdT=\the\eq@wdT, \eq@wdMin=\the\eq@wdMin,
           ^^J||===== LHS=\theb@@le\EQ@hasLHS: \eq@wdL=\the\eq@wdL, 
           ^^J||===== \eq@firstht=\the\eq@firstht, \eq@vspan=\the\eq@vspan
           ^^J||===== \eq@wdNum=\the\eq@wdNum
           ^^J||===== \eq@wdCond=\the\eq@wdCond, \conditionsep=\the\conditionsep,
           ^^J||===== \leftskip=\the\leftskip, \rightskip=\the\rightskip,
           ^^J||===== \abovedisplayskip=\the\abovedisplayskip,
           ^^J||===== \belowdisplayskip=\the\belowdisplayskip
           ^^J||===== parshape=\eq@parshape}%
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Set left & right skips for centered equations, 
% making allowances for numbers (if any, right, left) and constraint.
% ===
% Amazingly, I've managed to collect all the positioning logic for
% centered equations in one place, so it's more manageable.
% Unfortunately, by the time it does all it needs to do,
% it has evolved I'm (re)using so many temp variables, it's becoming
% unmanageble!
\def\eq@C@setsides{%
  % \dim@c = space for number, if any, and not shifted.
  \dim@c\z@
  \if\eq@hasNumber\if\eq@shiftnumber\else
    \dim@c\eq@wdNum
  \fi\fi
  % \dim@e = space for condition(on right), if any and formula is only a single line.(to center nicely)
  % but only count it as being right-aligned if we're not framing, since the frame must enclose it.
  \dim@e\z@
  \if F\eq@frame
    \ifnum\eq@lines=\@ne\ifdim\eq@wdCond>\z@
      \dim@e\eq@wdCond\advance\dim@e\conditionsep
  \fi\fi\fi
  % \dim@b = minimum needed on left max(totalleftmargin, left number space)
  \dim@b\z@
  \if L\eqnumside\ifdim\dim@b<\dim@c
    \dim@b\dim@c
  \fi\fi
  \ifdim\dim@b<\@totalleftmargin
    \dim@b\z@
  \else
    \advance\dim@b-\@totalleftmargin
  \fi
  % \dim@d = minimum needed on right max(condition, right number space)
  \dim@d\dim@e
  \if R\eqnumside\ifdim\dim@d<\dim@c
    \dim@d\dim@c
  \fi\fi
  % \dim@a = left margin; initially half available space
  % \dim@c = right margin;  ditto
  \dim@a\eq@linewidth\advance\dim@a-\eq@wdT\advance\dim@a\dim@e
  \advance\dim@a\@totalleftmargin
  \divide\dim@a2\relax
  \dim@c\dim@a
  % If too far to the left
  \ifdim\dim@a<\dim@b
     \advance\dim@c\dim@a\advance\dim@c-\dim@b
     \ifdim\dim@c<\z@\dim@c\z@\fi
     \dim@a\dim@b
  % Or if too far to the right
  \else\ifdim\dim@c<\dim@d
     \advance\dim@a\dim@c\advance\dim@a-\dim@d
     \ifdim\dim@a<\z@\dim@a\z@\fi
     \dim@c\dim@d
  \fi\fi
  % Now, \dim@d,\dim@e is the left & right glue to center each line for centerlines
  \dim@e\eq@wdT\advance\dim@e-\eq@wdMin\dim@d\z@
% NOTE: Need some work here centering when there's a condition
%  \advance\dim@e-\eq@wdT\multiply\dim@e-1\relax
%  \if\eq@wdMin<\dim@e\dim@e\eq@wdMin\fi
%  \multiply\dim@e-1\relax\advance\dim@e\eq@wdT
  \dim@d\z@
  \if\eq@centerlines
    \divide\dim@e2\relax\dim@d\dim@e
  \fi
  \leftskip\dim@a\@plus\dim@d
  \advance\dim@e\dim@c
  \rightskip\z@\@plus\dim@e%\@minus5\p@
  % Special case: if framing, reduce the stretchiness of the formula (eg. condition)
  % Or if we have a right number, FORCE space for it
  \dim@b\z@
  \if F\eq@frame\else
    \dim@b\dim@c
  \fi
  \if\eq@hasNumber\if\eq@shiftnumber\else\if R\eqnumside
    \dim@c\eq@wdNum
    \ifdim\dim@c>\dim@b\dim@b\dim@c\fi
  \fi\fi\fi
  % If either of those cases requires hard rightskip, move that part from glue.
  \ifdim\dim@b>\z@
    \advance\dim@e-\dim@c
    \rightskip\dim@b\@plus\dim@e%\@minus5\p@
  \fi
  % And peculiar further special case: in indented environs, width isn't where it would seem
  \ifdim\eq@wdCond>\z@
     \advance\rightskip-\@totalleftmargin
  \fi
  \parfillskip\z@skip
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Set the left and right side spacing for indented equations
% Some things handled by eq@C@setsides that probably apply here????
%  * centerlines
%  * \@totalleftmargin: SHOULD we move farther right? 
\def\eq@I@setsides{%
  % Leftskip is normally just the requested indentation
  \leftskip\mathindent
  % But move left, if shifted number presumably because of clashed w/ number?
  \if\eq@shiftnumber
    \dim@a\eq@linewidth\advance\dim@a-\eq@wdT\advance\dim@a-\mathindent
    \ifdim\dim@a<\z@
      \leftskip\z@ % Or something minimal?
  \fi\fi
  % Push gently from right.
  \dim@a\z@
  \dim@b\eq@linewidth\advance\dim@b-\leftskip\advance\dim@b-\eq@wdMin
  % Special case: if framing be much more rigid(?)
  \if F\eq@frame\else
    \dim@a\eq@linewidth\advance\dim@a-\leftskip\advance\dim@a-\eq@wdT
    \advance\dim@b-\dim@a
  \fi
  % Or force the space for right number, if needed
  \if\eq@hasNumber\if\eq@shiftnumber\else\if R\eqnumside
    \dim@c\eq@wdNum
    \if\dim@c>\dim@a
      \advance\dim@b-\dim@c\dim@a\dim@c
  \fi\fi\fi\fi
  \rightskip\dim@a\@plus\dim@b \@minus\hfuzz %\hfuzz\z@
  \parfillskip\z@skip
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Typesetting pieces: frame, equation and number (if any)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \dim@a should contain the downward displacement of number's baseline
\def\eq@typeset@leftnumber{%
  \skip@c\dim@a\advance\skip@c-\ht\EQ@numbox
  \vglue\skip@c% NON discardable
  \copy\EQ@numbox \penalty\@M
  \kern-\dim@a
}
\def\eq@typeset@rightnumber{%
  \skip@c\dim@a\advance\skip@c-\ht\EQ@numbox
  \vglue\skip@c% NON discardable
  \hbox to \hsize{\hfil\copy\EQ@numbox}\penalty\@M
  \kern-\dim@a
}
\def\eq@typeset@equation{%
  \nobreak
  \eq@params\eq@parshape
  \nointerlineskip\noindent
  \add@grp@label
  \eq@dump@box\unhbox\EQ@box\@@par
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    \end{macrocode}
% \changes{v0.95}{2007/12/03}{Made \cs{eqframe} obey the key settings
%   for frame and framesep.}
%    \begin{macrocode}
\newcommand\eqframe[2]{%
  \begingroup
  \fboxrule=\eq@framewd\relax\fboxsep=\eq@framesep\relax
  \framebox{\z@rule\@height#2\kern#1}%
  \endgroup
}
\def\eq@addframe{%
  \hbox to\z@{\dim@a\eq@framesep\relax \advance\dim@a\eq@framewd\relax
    \kern-\dim@a
    \vbox to\z@{\kern-\dim@a
      \hbox{\eqframe{\eq@wdT}{\eq@vspan}}%
      \vss
    }%
    \hss
  }%
}
\def\eq@typeset@frame{%
  \if F\eq@frame\else
   % Tricky: put before \noindent, so it's not affected by glue in \leftskip
   \nobreak\nointerlineskip
   \vbox to\eq@firstht{\moveright\leftskip\hbox to\z@{\eq@addframe\hss}\vss}%
   \kern-\eq@firstht
  \fi
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Delimiter measurements
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\@saveprimitive\left\@@left
\@saveprimitive\right\@@right
\newcount\lr@level
\def\eq@left{%
  \@ifnext .{\eq@nullleft}{\begingroup \let\delimiter\eq@left@a}%
}
\def\eq@right{%
  \@ifnext .{\eq@nullright}{\begingroup \let\delimiter\eq@right@a}%
}
\def\eq@left@a#1 #2{\endgroup\@@left\delimiter#1 \after@open}
\def\eq@right@a#1 #2{\endgroup
  \@@right\delimiter#1 \after@close \ss@scan{#1}%
}
\def\eq@nullleft#1{\@@left#1\after@open}
\def\eq@nullright#1{\@@right#1\after@close}
\def\delim@reset{%
  \let\after@open\relax \let\after@close\relax
  \let\left\@@left \let\right\@@right
}
\@ifundefined{bBigg@}{% not defined
  \let\big@size\p@
  \def\big{\bBigg@{8.5}}\def\Big{\bBigg@{11.5}}%
  \def\bigg{\bBigg@{14.5}}\def\Bigg{\bBigg@{17.5}}%
  \def\biggg{\bBigg@{20.5}}\def\Biggg{\bBigg@{23.5}}%
}{}
\def\bBigg@#1#2{%
  {\delim@reset
   \left#2%
   \vrule\@height#1\big@size\@width-\nulldelimiterspace
   \right.
  }%
}
\def\bigl#1{\mathopen\big{#1}\after@open}
\def\Bigl#1{\mathopen\Big{#1}\after@open}
\def\biggl#1{\mathopen\bigg{#1}\after@open}
\def\Biggl#1{\mathopen\Bigg{#1}\after@open}
\def\bigggl#1{\mathopen\biggg{#1}\after@open}
\def\Bigggl#1{\mathopen\Biggg{#1}\after@open}

\def\bigr#1{\mathclose\big{#1}\after@close}
\def\Bigr#1{\mathclose\Big{#1}\after@close}
\def\biggr#1{\mathclose\bigg{#1}\after@close}
\def\Biggr#1{\mathclose\Bigg{#1}\after@close}
\def\bigggr#1{\mathclose\biggg{#1}\after@close}
\def\Bigggr#1{\mathclose\Biggg{#1}\after@close}

%% No change needed, I think. [mjd,1998/12/04]
%%\def\bigm{\mathrel\big}
%%\def\Bigm{\mathrel\Big}
%%\def\biggm{\mathrel\bigg}
%%\def\Biggm{\mathrel\Bigg}
%%\def\bigggm{\mathrel\biggg}
%%\def\Bigggm{\mathrel\Biggg}
\let\m@@DeL\m@DeL \let\m@@DeR\m@DeR \let\m@@DeB\m@DeB
\def\d@@DeL#1#2#3{%
  \delimiter"4\@xp\delim@a\csname sd@#1#2#3\endcsname #1#2#3 \after@open
}
\def\d@@DeR#1#2#3{%
  \delimiter"5\@xp\delim@a\csname sd@#1#2#3\endcsname #1#2#3 \after@close
}
\def\d@@DeB#1#2#3{%
  \delimiter"0\@xp\delim@a\csname sd@#1#2#3\endcsname #1#2#3 \after@bidir
}
%%BRM: These weren't defined, but apparently should be.
% Are these the right values???
\let\m@@DeA\m@DeA\let\d@@DeA\m@DeA%

\let\after@bidir\@empty
\mathchardef\zero@bop=888 \relax
\mathchardef\bop@incr=4444 \relax
\def\after@open{%
  \global\advance\lr@level\@ne
  \prebinoppenalty\bop@incr \multiply\prebinoppenalty\lr@level
  \advance\prebinoppenalty\zero@bop
  \ifnum\eqbreakdepth<\lr@level
    \let\m@Bin\m@@Bin
  \else
    \eq@binoffset=\eqbinoffset
    \advance\eq@binoffset\lr@level\eqdelimoffset plus1fill\relax
    \def\dt@fill@cancel{\hskip\z@ minus1fill\relax}%
  \fi
  \penalty\@M % BRM: discourage break after an open fence?
}
\def\after@close{%
  \global\advance\lr@level\m@ne
  \prebinoppenalty\bop@incr \multiply\prebinoppenalty\lr@level
  \advance\prebinoppenalty\zero@bop
  \ifnum\eqbreakdepth<\lr@level
  \else \let\m@Bin\d@@Bin
  \fi
  \ifnum\lr@level<\@ne \eq@binoffset=\eqbinoffset\relax \fi
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Sub/Superscript measurement
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BRM: There's possibly a problem here.
% When \ss@scan gets invoked after a \left...\right pair in the LHS
% during \eq@measure, it produces an extra box (marked with \penalty 3);
% Apparently \eq@repack expects only one for the LHS.  
% The end result is \eq@wdL => 0.0pt !!! (or at least very small)

\let\subsup@flag=\count@
\def\ss@delim@a#1#2#3#4{\xdef\right@delim@code{\number"#2#3#4}}
\def\ss@scan#1{%
  \begingroup
    \let\delim@a\ss@delim@a \@tempcnta#1\relax
  \endgroup
  \subsup@flag\@M \afterassignment\ss@scan@a \let\@let@token=}
\def\ss@scan@a{%
  \ifx\@let@token\sb \advance\subsup@flag\@ne\else
  \ifx\@let@token\sp \advance\subsup@flag\tw@\else
    \ss@finish
    \expandafter\@firstoftwo % gobble \ss@scan@b
  \fi\fi
  \ss@scan@b\@let@token
}
\def\ss@scan@b#1#2{#1{%
% hack! coff!
  \let\m@Bin\m@@Bin  \let\m@Rel\m@@Rel
  #2}\afterassignment\ss@scan@a \let\@let@token=}%
\def\ss@finish{%
  \@@vadjust{\penalty\thr@@}%
  \penalty\right@delim@code \penalty-\subsup@flag \keep@glue
}
\def\eq@lrunpack{\setbox\z@\lastbox
  \unskip \nointerlineskip
  \noindent\unhbox\z@ \unskip
  \subsup@flag-\lastpenalty \unpenalty
  \xdef\right@delim@code{\number\lastpenalty}%
  \unpenalty
  \ifnum\subsup@flag>\@M
    \advance\subsup@flag-\@M
    \setbox\tw@\lastbox
  \else \setbox\tw@\box\voidb@x
  \fi
  \setbox\z@\lastbox
  \ifvoid\tw@ \unhbox\z@
  \else \lrss@reattach % uses \subsup@flag, box\z@, box\tw@
  \fi
  \penalty-\@Mi\z@rule\@@par
  \setbox\z@\lastbox \unskip\unpenalty
%%{\showboxbreadth\maxdimen\showboxdepth99\showlists}%
}
\dimendef\sub@depth=8 \dimendef\sup@base=6
\dimendef\prelim@sub@depth=4 \dimendef\prelim@sup@base=2
\def\sym@xheight{\fontdimen5\textfont\tw@}
\def\sup@base@one{\fontdimen13\textfont\tw@}
\def\sub@base@one{\fontdimen16\textfont\tw@}
\def\sub@base@two{\fontdimen17\textfont\tw@}
\def\sup@drop{\fontdimen18\scriptfont\tw@}
\def\sub@drop{\fontdimen19\scriptfont\tw@}
\providecommand{\mathaxis}{\fontdimen22\textfont\tw@}
\def\lrss@reattach{%
  \begingroup
  % "The TeXbook" Appendix G step 18:
  \prelim@sup@base\ht\z@ \advance\prelim@sup@base-\sup@drop
  \prelim@sub@depth\dp\z@ \advance\prelim@sub@depth\sub@drop
  \unhbox\z@
  \ifcase\subsup@flag      % case 0: this can't happen
  \or \lr@subscript   % case 1: subscript only
  \or \lr@superscript % case 2: superscript only
  \else \lr@subsup    % case 3: sub and superscript both
  \fi
  \endgroup
}
\def\lr@subscript{%
  \sub@depth\sub@base@one
  \ifdim\prelim@sub@depth>\sub@depth \sub@depth\prelim@sub@depth\fi
  \dim@a\ht\tw@ \advance\dim@a -.8\sym@xheight
  \ifdim\dim@a>\sub@depth \sub@depth\dim@a \fi
  \twang@adjust\sub@depth
  \lower\sub@depth\box\tw@
}
\def\lr@superscript{%
  \sup@base\sup@base@one
  \ifdim\prelim@sup@base>\sup@base \sup@base\prelim@sup@base\fi
  \dim@a\dp\tw@ \advance\dim@a -.25\sym@xheight
  \ifdim\dim@a>\sup@base \sup@base\dim@a \fi
  \twang@adjust\sup@base
  \raise\sup@base\box\tw@
}
\def\lr@subsup{%
  \sub@depth\sub@base@two
  \ifdim\prelim@sub@depth>\sub@depth \sub@depth\prelim@sub@depth \fi
  \twang@adjust\sub@depth
  \lower\sub@depth\box\tw@
}
\def\twang@adjust#1{%
  \begingroup
    \@ifundefined{twang@\right@delim@code}{}{%
      \dim@d=#1\advance\dim@d-\mathaxis
      % put an upper limit on the adjustment
      \ifdim\dim@d>1em \dim@d 1em \fi
      \kern\csname twang@\right@delim@code\endcsname\dim@d
    }%
  \endgroup
}
\newcommand{\DeclareTwang}[2]{%
  \ifcat.\@nx#1\begingroup
    \lccode`\~=`#1\lowercase{\endgroup \DeclareTwang{~}}{#2}%
  \else
    \@xp\decl@twang#1?\@nil{#2}%
  \fi
}
\def\decl@twang#1#2#3#4#5#6#7\@nil#8{%
  \@namedef{twang@\number"#4#5#6}{#8}%
}
\DeclareTwang{\rangle}{-.4}
\DeclareTwang{)}{-.33}
\DeclareTwang{\rbrace}{-.25}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% dseries environment
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newenvironment{dseries}{\let\eq@hasNumber\@True \@optarg\@dseries{}}{}%
\def\enddseries#1{\check@punct@or@qed}%

\newenvironment{dseries*}{\let\eq@hasNumber\@False \@optarg\@dseries{}}{}%
\@namedef{enddseries*}#1{\check@punct@or@qed}%
\@namedef{end@dseries*}{\end@dseries}%

\def\@dseries[#1]{%
%BRM: DS Expermient: Use alternative display setup.
%  \def\display@setup{\displaystyle}%
  \let\display@setup\dseries@display@setup
  % Question: should this be the default for dseries???
%  \let\eq@centerlines\@True
  \global\eq@wdCond\z@
% BRM: use special layout for dseries
%  \@dmath[#1]%
  \@dmath[layout={M},#1]%
  \mathsurround\z@\@@math \penalty\@Mi
  \let\endmath\ends@math
  \def\premath{%
    % BRM: Tricky to cleanup space OR add space ONLY BETWEEN math!
    \ifdim\lastskip<.3em \unskip
    \else\ifnum\lastpenalty<\@M \dquad\fi\fi
}%
%BRM: Tricky; if a subformula breaks, we'd like to start the next on new line!
  \def\postmath{\unpenalty\eq@addpunct \penalty\intermath@penalty \dquad \@ignoretrue}%
\ignorespaces
}
\def\end@dseries{%
  \unskip\unpenalty
  \@@endmath \mathsurround\z@ \end@dmath
}
%BRM: Try this layout for dseries: Essentially layout i, but w/o limit to 1 line.
% And no fallback!
\def\eq@try@layout@M{%
  \edef\@parshape{\parshape 1 0pt \the\eq@linewidth\relax}%
  \eq@trial@b{M}{}%
}
% BRM: Tricky to get right value here. 
% Prefer breaks between formula if we've got to break at all.
%\def\intermath@penalty{-201}%
\def\intermath@penalty{-221}%
% BRM: A bit tighter than it was ( 1em minus.25em )
%\newcommand\dquad{\hskip0.4em}
\newcommand\dquad{\hskip0.6em minus.3em}
\newcommand\premath{}\newcommand\postmath{}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Redefinition of math environment to take advantage of dseries env.
\renewenvironment{math}{%
  \leavevmode \premath
  \ifmmode\@badmath\else\@@math\fi
}{%
  \ifmmode\@@endmath\else\@badmath\fi
}
\def\ends@math#1{\check@punct@or@qed}
\def\end@math{%
  \ifmmode\@@endmath\else\@badmath\fi
  \postmath
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% dgroup environment
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BRM: Fairly broad changes; it mostly didn't work before (for me).
%
% \begin{dgroup} produces a `numbered' group
%   The number is the next equation number.
%   There are 2 cases:
%    * If ANY contained equations are numbered (\begin{dmath}), 
%      then they will be subnumbered: eg 1.1a
%      and the group number is not otherwise displayed.
%    * If ALL contained equations are unnumbered (\begin{dmath*})
%      then the group, as a whole, gets a number displayed,
%      using the same number placement as for equations.
% \begin{dgroup*} produces an unnumbered group.
%    Contained equations are numbered, or not, as normal.
%    But note that in the mixed case, it's too late to
%    force the unnumbered eqns to \retry@with@number
%    We'll just do a simple check of dimensions, after the fact,
%    and force a shiftnumber if we're stuck.
% NOTE: Does this work for dseries, as well? (alignment?)
% NOTE: Does \label attach to the expected thing?
%
% For number placement: We use shiftnumber placement on ALL equations
%    if ANY equations need it, or if an unnumbered equation is too 
%    wide to be aligned, given that the group or other eqns are numbered.
%    [does this latter case interract with the chosen alignment?]
%
% For Alignment:
%   As currently coded, it tries to align on relations, by default.
%   If LHS's are not all present, or too long, it switches to left-justify.
%   Maybe there are other cases that should switch?
%   Should there be a case for centered?
% NOTE: Should there be some options to choose alignment?
%
\let\eq@group\@False
\let\grp@shiftnumber\@False
\let\grp@hasNumber\@False
\let\grp@eqs@numbered\@False
\let\grp@aligned\@True
\global\let\GRP@top\@True
\newenvironment{dgroup}{%
  \let\grp@hasNumber\@True\@optarg\@dgroup{}%
}{%
  \end@dgroup
}
\newtoks\GRP@queue
\newenvironment{dgroup*}{%
  \let\grp@hasNumber\@False\@optarg\@dgroup{}%
}{%
  \end@dgroup
}
\def\@dgroup[#1]{%
  \debugmsg{=== DGROUP ==================================================}%
  \let\eq@group\@True \global\let\GRP@top\@True
  \global\GRP@queue\@emptytoks \global\setbox\GRP@box\box\voidb@x
  \global\let\GRP@label\@empty
  \global\grp@wdL\z@\global\grp@wdR\z@\global\grp@wdT\z@
  \global\grp@linewidth\z@\global\grp@wdNum\z@
  \global\let\grp@eqs@numbered\@False
  \global\let\grp@aligned\@True
  \global\let\grp@shiftnumber\@False
  \eq@prelim
  \setkeys{breqn}{#1}%
  \if\grp@hasNumber \grp@setnumber \fi
}
\def\end@dgroup{%
  \EQ@displayinfo \grp@finish
  \if\grp@hasNumber\grp@resetnumber\fi
}
\@ifundefined{c@parentequation}{\newcounter{parentequation}}{}
\global\let\GRP@label\@empty
\def\add@grp@label{%
  \ifx\@empty\GRP@label
  \else \GRP@label \global\let\GRP@label\@empty
  \fi
}
\def\grp@setnumber{%
  \global\let\GRP@label\next@label \global\let\next@label\@empty
  % Trick \eq@setnumber to doing our work for us.
  \let\eq@hasNumber\@True
  \eq@setnumber
  \global\sbox\GRP@numbox{\unhbox\EQ@numbox}%
  \grp@wdNum\eq@wdNum
  \let\eq@hasNumber\@False
  \let\eq@number\@empty
  \eq@wdNum\z@
%
  \protected@edef\theparentequation{\theequation}%
  \setcounter{parentequation}{\value{equation}}%
  \setcounter{equation}{0}%
  \def\theequation{\theparentequation\alph{equation}}%
  \debugmsg{Group Number \theequation}%
}
\def\grp@resetnumber{%
  \setcounter{equation}{\value{parentequation}}%
}
\newbox\GRP@box
\newbox\GRP@wholebox
% Save data for this equation in the group
%  * push the trial data onto end of \GRP@queue
%  * push an hbox onto the front of \GRP@box
%    containing: \EQ@box, \EQ@copy, \penalty 1 and \EQ@numbox
\def\grp@push{%
  \global\GRP@queue\@xp\@xp\@xp{\@xp\the\@xp\GRP@queue
    \@xp\@elt\@xp{\EQ@trial}%
  }%
  \global\setbox\GRP@box\vbox{%
    \hbox{\box\EQ@box\box\EQ@copy\penalty\@ne\copy\EQ@numbox}%
    \unvbox\GRP@box
  }%
 \global\let\GRP@top\@False
 \EQ@trial
  \if\eq@isIntertext\else
    \ifdim\eq@wdL>\grp@wdL \global\grp@wdL\eq@wdL \fi
    \ifdim\eq@wdT>\grp@wdT \global\grp@wdT\eq@wdT \fi
    \dim@a\eq@wdT \advance\dim@a-\eq@wdL
    \ifdim\dim@a>\grp@wdR \global\grp@wdR\dim@a \fi
    \ifdim\eq@linewidth>\grp@linewidth \global\grp@linewidth\eq@linewidth\fi
    \if\eq@hasNumber
       \global\let\grp@eqs@numbered\@True
       \ifdim\eq@wdNum>\grp@wdNum\global\grp@wdNum\eq@wdNum\fi
    \fi
    \if\EQ@hasLHS\else\global\let\grp@aligned\@False\fi
    \if D\eq@layout \global\let\grp@aligned\@False\fi % Layout D (usually) puts rel on 2nd line.
    \if\eq@shiftnumber\global\let\grp@shiftnumber\@True\fi % One eq shifted forces all.
  \fi
}
% BRM: Questionable patch!!
% When processing the \GRP@queue, put it into a \vbox, then \unvbox it.
% This since there's a bizarre problem when the \output routine
% gets invoked at an inopportune moment: All the not-yet-processed
% \GRP@queue ends up in the \@freelist and bad name clashes happen.
% Of course, it could be due to some other problem entirely!!!
\def\grp@finish{%
%  \debug@box\GRP@box
%  \debugmsg{\GRP@queue: \the\GRP@queue}%
  % == Now that we know the collective measurements, make final decision about alignment & shifting.
  % Check if alignment is still possible
  \dim@a\grp@wdL\advance\dim@a\grp@wdR\advance\dim@a-4em\relax% Allowance for shrink?
  \if\grp@aligned\ifdim\dim@a>\grp@linewidth
     \global\let\grp@aligned\@False     
  \fi\fi
  % If we're adding an unshifted group number that equations didn't know about, re-check shifting
  \advance\dim@a\grp@wdNum % Effective length
  \if\grp@shiftnumber\else\if\grp@hasNumber\if\grp@eqs@numbered\else\ifdim\dim@a>\grp@linewidth
     \global\let\grp@shiftnumber\@True
  \fi\fi\fi\fi
  % If we can still align, total width is sum of maximum LHS & RHS
  \if\grp@aligned
     \global\grp@wdT\grp@wdL\global\advance\grp@wdT\grp@wdR
  \fi
  \debugmsg{======= DGROUP Formatting
          ^^J||===== \grp@wdL=\the\grp@wdL, \grp@wdR=\the\grp@wdR
          ^^J||===== Shift Number=\theb@@le\grp@shiftnumber, Eqns. numbered=\theb@@le\grp@eqs@numbered
          ^^J||===== Aligned=\theb@@le\grp@aligned
          ^^J||===== \grp@wdNum=\the\grp@wdNum}%
  % BRM: Originally this stuff was dumped directly, without capturing it in a \vbox
  \setbox\GRP@wholebox\vbox{%
    \let\@elt\eqgrp@elt
    \the\GRP@queue
  }%
  % If we're placing a group number (not individual eqn numbers)
  % NOTE: For now, just code up LM number
  % NOTE: Come back and handle other cases.
  % NOTE: Vertical spacing is off, perhaps because of inter eqn. glue
    \eq@topspace{\vskip\parskip}%
  \if\grp@hasNumber\if\grp@eqs@numbered\else
%    \eq@topspace{\vskip\parskip}%
    \if\grp@shiftnumber
      \copy\GRP@numbox \penalty\@M
      \kern\eqlineskip
    \else
      \dim@a\ht\GRP@wholebox\advance\dim@a\dp\GRP@wholebox
      \advance\dim@a\ht\GRP@numbox\advance\dim@a-\dp\GRP@numbox
      \divide\dim@a\tw@
      \skip@c\dim@a\advance\skip@c-\ht\GRP@numbox
      \vglue\skip@c% NON discardable
      \copy\GRP@numbox \penalty\@M
\debugmsg{GROUP NUMBER: preskip:\the\skip@c,  postkern:\the\dim@a, height:\the\ht\GRP@wholebox,
         ^^J||===== box height:\the\ht\GRP@numbox, box depth:\the\dp\GRP@numbox}%
      \kern-\dim@a
      \kern-\abovedisplayskip % To cancel the topspace above the first eqn.
    \fi
  \fi\fi
%\debug@box\GRP@wholebox
  \unvbox\GRP@wholebox
  \let\@elt\relax
  % We'd need to handle shifted, right number here, too!!!
  \eq@botspace % not needed unless bottom number?
}
% The arg is an \EQ@trial
\def\eqgrp@elt#1{%
  \global\setbox\GRP@box\vbox{%
    \unvbox\GRP@box
    \setbox\z@\lastbox
    \setbox\tw@\hbox{\unhbox\z@
      \ifnum\lastpenalty=\@ne
      \else
        \global\setbox\EQ@numbox\lastbox
      \fi
      \unpenalty
      \global\setbox\EQ@copy\lastbox
      \global\setbox\EQ@box\lastbox
    }%
  }%
  \begingroup \let\eq@botspace\relax
  #1%
  \if\eq@isIntertext
    \vskip\belowdisplayskip
    \unvbox\EQ@copy
  \else
    \grp@override
    \eq@finish
  \fi
  \endgroup
}
% Override the \eq@trial data as needed for this equation in this group
% NOTE: w/ numbering variations (see above), we may need to tell
%  \eq@finish to allocate space for a number, but not actually have one
\def\grp@override{%
 % For aligned (possibly becomes an option?)
 % For now ASSUMING we started out as CLM!!!
  \def\eqindent{I}%
  % compute nominal left for centering the group
  \dim@a\grp@linewidth\advance\dim@a-\grp@wdT\divide\dim@a2\relax
  % Make sure L+R not too wide; should already have unset alignment
  \ifdim\dim@a<\z@\dim@a\z@\fi
  \dim@b\if L\eqnumside\grp@wdNum\else\z@\fi
  % make sure room for number on left, if needed.
  \if\grp@shiftnumber\else
    \ifdim\dim@b>\dim@a\dim@a\dim@b\fi
  \fi
  \if\grp@aligned
    \advance\dim@a\grp@wdL\advance\dim@a-\eq@wdL
  \fi
  \mathindent\dim@a
  \ifdim\dim@b>\dim@a
    \let\eq@shiftnumber\@True
  \fi
% Could set \def\eqnumplace{T} (or even (m) if indentation is enough.
%
% NOTE: Work out how this should interact with the various formats!!!
% NOTE: should recognize the case where the LHS's are a bit Wild,
%  and then do simple left align (not on relation)
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% darray environment
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newskip\darraycolsep \darraycolsep 20pt plus1fil minus12pt
\newcount\cur@row \newcount\cur@col
\def\@tempa#1#2#3{%
  \cur@col#1 \hfil
  \setbox\z@\hbox{$\displaystyle####\m@th$}\@nx\col@box
  \tabskip\z@skip
  &\cur@col#2 \hfil
  \setbox\z@\hbox{$\displaystyle\mathord{}####\mathord{}\m@th$}\@nx\col@box
  \hfil
  &\cur@col#3 \setbox\z@\hbox{$\displaystyle####\m@th$}\@nx\col@box
  \hfil\tabskip\darraycolsep
}
\xdef\darray@preamble{%
  \@tempa 123&\@tempa 456&\@tempa 789%
  &\@tempa{10}{11}{12}&\@tempa{13}{14}{15}&\@tempa{16}{17}{18}%
  \cr
}
\@ifundefined{Mathstrut@}{\let\Mathstrut@\strut}{}
\def\darray@cr{\Mathstrut@\cr}
\def\col@box{%
%\debugmsg{Col \number\cur@row,\number\cur@col: \the\wd\z@\space x \the\ht\z@+\the\dp\z@}%
  \unhbox\z@
}
\newenvironment{darray}{\@optarg\@darray{}}{}
\def\@darray[#1]{%
  \debugmsg{=== DARRAY ==================================================}%
  \if\eq@group\else\eq@prelim\fi
  \global\let\@preamble\@empty
  \setkeys{breqn}{#1}%
  \the\eqstyle \eq@setnumber
  \ifx\@preamble\@empty \global\let\@preamble\darray@preamble \fi
  \check@mathfonts
  % \let\check@mathfonts\relax % tempting, but too risky
  \@xp\let\csname\string\ \endcsname\darray@cr
  \setbox\z@\vbox\bgroup
  \everycr{\noalign{\global\advance\cur@row\@ne}}%
  \tabskip\z@skip \cur@col\z@
  \global\cur@row\z@
  \penalty\@ne % flag for \dar@repack
  \halign\@xp\bgroup\@preamble
}
\def\enddarray#1{\check@punct@or@qed}
\def\end@darray{%
  \ifvmode\else \eq@addpunct \Mathstrut@\fi\crcr \egroup
  \dar@capture
  \egroup
}
\def\dar@capture{%
%% \showboxbreadth\maxdimen\showboxdepth99\showlists
  \eq@wdL\z@ \eq@wdRmax\z@
  \dar@repack
}
\def\dar@repack{%
  \unpenalty
  \setbox\tw@\lastbox
%\batchmode{\showboxbreadth\maxdimen\showboxdepth99\showbox\tw@}\errorstopmode
  \global\setbox\EQ@box\hbox{%
    \hbox{\unhcopy\tw@\unskip}\penalty-\@M \unhbox\EQ@box}%
  \global\setbox\EQ@copy\hbox{%
    \hbox{\unhbox\tw@\unskip}\penalty-\@M \unhbox\EQ@copy}%
  \unskip
  \ifcase\lastpenalty \else\@xp\@gobble\fi
  \dar@repack
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Conditions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BRM: Some modifications here, since I like for the condition
% to go flush right. (thus, it also affects centering, margins, etc)
\newskip\conditionsep \conditionsep=10pt minus5pt%
\newcommand{\conditionpunct}{,}
\let\cond@gobble\@firstofone
\newcommand\condition{%
  \begingroup\@tempswatrue
    \@ifstar{\@tempswafalse \condition@a}\condition@a
}
\newcommand\condition@a[2][\conditionpunct]{%
  \unpenalty\unskip\unpenalty\unskip % BRM Added
  \hbox{#1}%
  \penalty -201\relax\hbox{}% Penalty to allow breaks here.
  \hskip\conditionsep
  \if@tempswa \@xp\hbox \else \@xp\condition@b\fi
  {#2}%
  \endgroup
  % BRM: Testing if I can measure conditions?
  \setbox\z@\if@tempswa\hbox{#2}\else\hbox{\textmath@setup #2}\fi
  \global\eq@wdCond\wd\z@
  \let\cond@gobble\@gobble
}

\newcommand\condition@b[1]{%
  \cond@gobble{\hskip\conditionsep}%
  \textmath@setup #1%
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Intertext and other insertions.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newenvironment{XXXXdsuspend}{%
  \global\setbox\EQ@box\vbox\bgroup \@parboxrestore
    \parshape 1 \displayindent \displaywidth\relax
    \hsize=\columnwidth \noindent\ignorespaces
}{%
  \par\egroup
  \global\setbox\GRP@box\vbox{%
    \vbox{\copy\EQ@box\vtop{\unvbox\EQ@box}}%
    \unvbox\GRP@box
  }%
  \global\GRP@queue\@xp{\the\GRP@queue
    \@elt{\gdef\EQ@trial{}}%
  }%
}
\newenvironment{dsuspend}{%
  \global\setbox\EQ@box\vbox\bgroup \@parboxrestore
    \parshape 1 \displayindent \displaywidth\relax
    \hsize=\columnwidth \noindent\ignorespaces
}{%
  \par\egroup
  \global\setbox\GRP@box\vbox{%
    \hbox{\copy\EQ@box\vtop{\unvbox\EQ@box}}%
    \unvbox\GRP@box
  }%
  \global\GRP@queue\@xp{\the\GRP@queue
%    \@elt{\gdef\EQ@trial{\let\eq@isIntertext\@True}}%
     \@elt{\let\eq@isIntertext\@True}%
  }%
}
\newcommand\breqn@intertext[1]{\dsuspend#1\enddsuspend}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\renewcommand{\*}{%
  \if@display
    \setbox\z@\hbox{\mathsurround\z@$\mkern\eq@binoffset$}%
    \discretionary{}{%
      \kern\the\wd\z@ \textchar\discretionarytimes
    }{}%
    \thinspace
  \else
    \discretionary{\thinspace\textchar\discretionarytimes}{}{}%
  \fi
}
\newcommand{\discretionarytimes}{\times}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\def\nref#1{\@xp\@nref\csname r@#1\endcsname}
\def\@nref#1#2{\ifx\relax#1??\else \@xp\@firstoftwo#1\fi}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\endinput
%</package>
%    \end{macrocode}